<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IT杂货铺</title>
  
  <subtitle>技术、人、生活</subtitle>
  <link href="https://www.itgrocery.cn/atom.xml" rel="self"/>
  
  <link href="https://www.itgrocery.cn/"/>
  <updated>2023-05-06T06:48:10.364Z</updated>
  <id>https://www.itgrocery.cn/</id>
  
  <author>
    <name>itren(香农)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos7 安装 MySQL 5.7 教程</title>
    <link href="https://www.itgrocery.cn/posts/aab0d980/"/>
    <id>https://www.itgrocery.cn/posts/aab0d980/</id>
    <published>2021-01-04T14:17:50.000Z</published>
    <updated>2023-05-06T06:48:10.364Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 安装环境：</p><ul><li>Centos 7</li><li>MySQL 5.7</li></ul><span id="more"></span><h2 id="配置-YUM-源"><a href="#配置-YUM-源" class="headerlink" title="配置 YUM 源"></a>配置 YUM 源</h2><ul><li>下载 MySQL 源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure><ul><li>安装源文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></table></figure><h2 id="MySQL-常见操作"><a href="#MySQL-常见操作" class="headerlink" title="MySQL 常见操作"></a>MySQL 常见操作</h2><ul><li>启动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><ul><li>查看状态</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><ul><li>开机启动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure><ul><li>重新加载配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>初次配置 root 密码</li></ul><p>先使用命令查看默认生成的临时密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>使用临时密码登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>修改 root 密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;newpassword!&#x27;; </span><br></pre></td></tr></table></figure><ul><li>允许 root 可以远程登录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">UPDATE user SET Host=&#x27;%&#x27; WHERE User=&#x27;root&#x27;;</span><br><span class="line">flush privileges</span><br></pre></td></tr></table></figure><ul><li>指定用户名更新密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set password=PASSWORD(&#x27;newpassword!&#x27;) where user=&#x27;root&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://www.jianshu.com/p/1dab9a4d0d5f">CentOS 7 下 MySQL 5.7 的安装与配置</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL 安装环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Centos 7&lt;/li&gt;
&lt;li&gt;MySQL 5.7&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="cookbook" scheme="https://www.itgrocery.cn/categories/cookbook/"/>
    
    <category term="database" scheme="https://www.itgrocery.cn/categories/cookbook/database/"/>
    
    
    <category term="mysql" scheme="https://www.itgrocery.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>常用服务 Docker 部署指南</title>
    <link href="https://www.itgrocery.cn/posts/31d89820/"/>
    <id>https://www.itgrocery.cn/posts/31d89820/</id>
    <published>2020-12-19T13:29:03.000Z</published>
    <updated>2023-05-06T06:48:10.336Z</updated>
    
    <content type="html"><![CDATA[<p>维护常见的服务 Docker 部署的命令，方便快速搭建服务。</p><span id="more"></span><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --restart=unless-stopped --name mysql6-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.6</span><br></pre></td></tr></table></figure><p>注：部署 MySQL 5.6 版本，端口：3306，密码：123456</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;维护常见的服务 Docker 部署的命令，方便快速搭建服务。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://www.itgrocery.cn/categories/tools/"/>
    
    
    <category term="docker" scheme="https://www.itgrocery.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>关于MySQL各类锁的总结</title>
    <link href="https://www.itgrocery.cn/posts/3d7cfa16/"/>
    <id>https://www.itgrocery.cn/posts/3d7cfa16/</id>
    <published>2020-12-19T13:08:46.000Z</published>
    <updated>2023-05-06T06:48:10.336Z</updated>
    
    <content type="html"><![CDATA[<p>想要用好 MySQL，索引与锁是一个绕不开的话题。最近一直在维护以前的业务系统，线上频繁报出数据库死锁的异常警告，为了排查以及规避死锁的问题，因此对 MySQL 的锁（Innodb引擎）做了一个比较深入学习，顺便加深自己对 MySQL 的理解程度。个人感觉 MySQL 中的锁还是非常的杂，官网对于锁的介绍也是和盘托出，并没有分门别类的罗列出来，下面分别从锁的模式与算法来分析。</p><span id="more"></span><h2 id="锁的模式"><a href="#锁的模式" class="headerlink" title="锁的模式"></a>锁的模式</h2><p>MySQL 中有锁的模式这个概念，在 Innodb 中锁的模式有共享锁（S锁）、排它锁（X锁）两大类。除了这两大类，还有一个意向锁的概念，意向锁在锁模式中有意向共享锁（IS锁）、意向排它锁（IX锁）两类。</p><h3 id="共享锁（行级别）"><a href="#共享锁（行级别）" class="headerlink" title="共享锁（行级别）"></a>共享锁（行级别）</h3><p>共享锁也叫读锁，对于同一个资源，大家都可以同时加上共享锁，可以理解成非独家的资源，大家都可以获取。共享锁与排它锁互斥，在 MySQL 中可以使用“lock in share mode”语法显式的加共享锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test where id = 1 lock in share mode;</span><br></pre></td></tr></table></figure><h3 id="排它锁（行级别）"><a href="#排它锁（行级别）" class="headerlink" title="排它锁（行级别）"></a>排它锁（行级别）</h3><p>排它锁也叫写锁，排它锁不仅与共享锁互斥，排它锁与排它锁也互斥，在 MySQL 中可以使用“for update”语法显示的加排它锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test where id = 1 for update;</span><br></pre></td></tr></table></figure><h3 id="意向锁（表级别）"><a href="#意向锁（表级别）" class="headerlink" title="意向锁（表级别）"></a>意向锁（表级别）</h3><p>InnoDB 存储引擎支持多粒度锁定，当数据库对行记录进行加锁时，首先会在粗粒度的表级别加上意向锁。意向锁的主要目的是为了提升表锁的加锁效率，假设没有意向锁，数据库在对表进行加锁时，需要扫描表中所有的记录，查看是否有行锁与当前要加的表锁冲突。意向锁之间是没有冲突的，意向锁与普通的表锁之间有冲突。</p><ul><li>意向共享锁</li></ul><p>意向共享锁无法通过语法显式的操作，当加上行级别的共享锁时，意向共享锁就会存在，意向共享锁与排它锁（表级）冲突。</p><ul><li>意向排它锁</li></ul><p>意向排它锁与上面的意向共享锁类似，它与共享锁（表级）、排它锁（表级）都冲突。</p><h3 id="普通锁（表级别）"><a href="#普通锁（表级别）" class="headerlink" title="普通锁（表级别）"></a>普通锁（表级别）</h3><p>表级别的锁因为粒度更粗，所以在判断是否有冲突时不仅要考虑表级别下的其它锁，还要考虑表中的行锁。</p><ul><li>共享锁</li></ul><p>除了对行可以加共享锁，也可以对表加共享锁，通过“lock table read”语法来对表加共享锁。表级别的共享锁不仅与表级别的排它锁冲突，而且与行级别的排它锁冲突。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock table test read;</span><br></pre></td></tr></table></figure><ul><li>排它锁</li></ul><p>除了对行可以加排它锁，也可以对表加排它锁，通过“lock table write”语法来对表加共享锁。表级别的排它锁不仅与表级别的共享锁、排它锁冲突，而且与行级别的排它锁也冲突。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock table test write;</span><br></pre></td></tr></table></figure><h2 id="锁的算法"><a href="#锁的算法" class="headerlink" title="锁的算法"></a>锁的算法</h2><p>锁的模式侧重锁的意图，锁的算法更加偏重锁的范围，例如下面列举的这些锁都是跟锁住的范围区间有关系。为了更好的演示锁住的区间，下面给出测试的表结构以及数据方便论证。</p><p>表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `test_info` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `no` int(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `description` varchar(255) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `idx_no` (`no`) USING BTREE,</span><br><span class="line">  KEY `idx_description` (`description`(191)) USING BTREE</span><br><span class="line">); </span><br></pre></td></tr></table></figure><p>数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `test_info`(`id`, `no`, `description`) VALUES (1, 10, &#x27;100&#x27;);</span><br><span class="line">INSERT INTO `test_info`(`id`, `no`, `description`) VALUES (2, 20, &#x27;200&#x27;);</span><br><span class="line">INSERT INTO `test_info`(`id`, `no`, `description`) VALUES (5, 50, &#x27;500&#x27;);</span><br><span class="line">INSERT INTO `test_info`(`id`, `no`, `description`) VALUES (10, 100, &#x27;1000&#x27;);</span><br><span class="line">INSERT INTO `test_info`(`id`, `no`, `description`) VALUES (11, 110, &#x27;1000&#x27;);</span><br></pre></td></tr></table></figure><h3 id="记录锁"><a href="#记录锁" class="headerlink" title="记录锁"></a>记录锁</h3><p>记录锁作用在精确匹配的唯一索引上，它与间隙锁最大的差别在于间隙锁锁住的是不存在的区间。</p><p>记录锁 SQL 示例：</p><ul><li>主键索引加锁</li></ul><p>事物一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where id = 1 for update;</span><br></pre></td></tr></table></figure><p>事物二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where id = 1 for update;</span><br></pre></td></tr></table></figure><p>事物二阻塞。</p><ul><li>唯一索引加锁</li></ul><p>事物一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where no = 10 for update;</span><br></pre></td></tr></table></figure><p>事物二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where no = 10 for update;</span><br></pre></td></tr></table></figure><p>事物二阻塞</p><ul><li>普通索引加锁</li></ul><p>事物一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where description = 1000 for update;</span><br></pre></td></tr></table></figure><p>事物二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where id = 10 for update;</span><br></pre></td></tr></table></figure><p>事物二阻塞，结束事物二，执行事物三</p><p>事物三：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where id = 11 for update;</span><br></pre></td></tr></table></figure><p>事物三阻塞，结束事物三，执行事物四</p><p>事物四：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where id = 5 for update;</span><br></pre></td></tr></table></figure><p>事物四未被阻塞。</p><p>普通索引作为二级索引被加锁时，对应的主键索引也是会被加锁的，所以可以看到 id 为 10、11 的记录都会被阻塞住。</p><h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>间隙锁一般存在于 RR 的隔离级别，MySQL 在 RR 隔离级别下可以解决部分幻读的问题，依靠的就是间隙锁。间隙锁的上界、下界都是开区间，间隙锁存在的目的主要是为了阻塞插入操作，这样就不会存在相同的条件下查询的结果集不一致的情况。</p><p>间隙锁示例（RR隔离级别）：</p><ul><li>普通索引加锁（未命中记录）</li></ul><p>事物一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where description = 300 for update;</span><br></pre></td></tr></table></figure><p>事物二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `test_info`(`id`, `no`, `description`) VALUES (3, 21, &#x27;210&#x27;);</span><br></pre></td></tr></table></figure><p>事物二会阻塞，因为示例中的事物隔离级别为 RR，并且在事物一中没有查询到记录，为了避免幻读发生，所以将 (200,500) 的期间锁住了。上面的介绍中有提到间隙锁一般存在于 RR 的隔离级别中，所以上面的示例在 RC 隔离级别下执行事物二是不会被阻塞的。</p><ul><li>普通索引加锁（命中记录）</li></ul><p>事物一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where description = 200 for update;</span><br></pre></td></tr></table></figure><p>事物二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where description = 210 for update;</span><br></pre></td></tr></table></figure><p>事物二阻塞，结束事物二，执行事物三</p><p>事物三：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where description = 190 for update;</span><br></pre></td></tr></table></figure><p>事物三阻塞。</p><p>如果普通索引命中了记录，那么被锁定的区间不仅有 (200,500)，还有 (100,200]，所以普通索引的前后都会被锁住。</p><ul><li>唯一索引加锁</li></ul><p>对于唯一索引如果命中记录，那么会加上记录锁（临间锁退化为记录锁，记录锁已演示这种场景），如果没有命中记录则会加上间隙锁。</p><p>事物一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_info where no = 21 for update;</span><br></pre></td></tr></table></figure><p>事物二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `test_info`(`id`, `no`, `description`) VALUES (3, 22, &#x27;210&#x27;);</span><br></pre></td></tr></table></figure><p>事物二阻塞</p><h3 id="临键锁"><a href="#临键锁" class="headerlink" title="临键锁"></a>临键锁</h3><p>临键锁是由记录锁与间隙锁组成的（区间为左开右闭），所以记录锁与间隙锁可以理解成特殊场景下的临键锁。Innodb 引擎行锁默认采用的就是临键锁的算法，只是在不同的场景下会退化成记录锁或者间隙锁。</p><h2 id="特殊场景的锁"><a href="#特殊场景的锁" class="headerlink" title="特殊场景的锁"></a>特殊场景的锁</h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>插入操作加锁的操作是一个复杂的过程，并不会只存在一把锁。插入过程中首先会加插入意向锁，接着检查是否有唯一键冲突的问题，针对唯一性冲突还有可能会加上 S GAP（RC的隔离级别也会存在），当记录插入成功时还会对该条记录加上 X 的记录锁。 </p><p>事物一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete from test_info where no = 50;</span><br><span class="line"></span><br><span class="line">insert into `test_info`(`id`, `no`, `description`) values (5, 50, 500);</span><br></pre></td></tr></table></figure><p>事物二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into `test_info`(`id`, `no`, `description`) values (3, 30, 300);</span><br></pre></td></tr></table></figure><p>事物二阻塞</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;想要用好 MySQL，索引与锁是一个绕不开的话题。最近一直在维护以前的业务系统，线上频繁报出数据库死锁的异常警告，为了排查以及规避死锁的问题，因此对 MySQL 的锁（Innodb引擎）做了一个比较深入学习，顺便加深自己对 MySQL 的理解程度。个人感觉 MySQL 中的锁还是非常的杂，官网对于锁的介绍也是和盘托出，并没有分门别类的罗列出来，下面分别从锁的模式与算法来分析。&lt;/p&gt;</summary>
    
    
    
    <category term="summary" scheme="https://www.itgrocery.cn/categories/summary/"/>
    
    <category term="database" scheme="https://www.itgrocery.cn/categories/summary/database/"/>
    
    
    <category term="mysql" scheme="https://www.itgrocery.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>macOS Big Sur 下根目录关联 Apollo 配置文件</title>
    <link href="https://www.itgrocery.cn/posts/f9c08d5a/"/>
    <id>https://www.itgrocery.cn/posts/f9c08d5a/</id>
    <published>2020-12-06T14:27:38.000Z</published>
    <updated>2023-05-06T06:48:10.332Z</updated>
    
    <content type="html"><![CDATA[<p>从 macOS Catalina 开始收紧了系统目录的权限，不能像以前那样使用 root 账户在系统根目录创建子目录与文件，这种限制对于开发人员来说非常不友好。Catalina 这个版本还可以通过软连接达到目的，但是最新的 Big Sur 这种方式已经失效了，好在 Apple 的官网讨论区已经有人给出了解决方案。</p><span id="more"></span><p>这次的解决方案与之前的方式类似，也是通过映射的方式实现，在 Catalina 上是通过软链接实现的，在 Big Sur 中是通过配置文件实现的，配置文件方式猜测应该是 Apple 官方支持的方式。</p><h2 id="在用户目录新建文件夹"><a href="#在用户目录新建文件夹" class="headerlink" title="在用户目录新建文件夹"></a>在用户目录新建文件夹</h2><p>因为像 Apollo 配置中心需要使用系统目录保存配置文件，我们可以先在用户目录新建同名的配置目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/&#123;user_dir&#125;/opt</span><br></pre></td></tr></table></figure><p>上面就是我在自己用户名下新建的 opt 目录，专门用来保存 Apollo 相关的配置文件。</p><h2 id="使用-root-权限新建-synthetic-conf-文件"><a href="#使用-root-权限新建-synthetic-conf-文件" class="headerlink" title="使用 root 权限新建 synthetic.conf 文件"></a>使用 root 权限新建 synthetic.conf 文件</h2><p>因为要在系统根目录创建配置文件，所以需要 root权限，mac 上如何开启 root 权限可以自行搜索，下面给出 synthetic.conf 配置的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opt/Users/&#123;user_dir&#125;/opt</span><br></pre></td></tr></table></figure><p>上面的 opt 就是你想在根目录创建的文件夹，后面用户目录的文件夹是实际的配置目录。需要注意的是两个目录中间是使用 “tab” 作为分隔符的，不要使用空格作为分隔符，配置完成后重启生效。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>-[1] <a href="https://discussionschinese.apple.com/thread/252048297">big sur 根目录无法创建文件夹</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从 macOS Catalina 开始收紧了系统目录的权限，不能像以前那样使用 root 账户在系统根目录创建子目录与文件，这种限制对于开发人员来说非常不友好。Catalina 这个版本还可以通过软连接达到目的，但是最新的 Big Sur 这种方式已经失效了，好在 Apple 的官网讨论区已经有人给出了解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://www.itgrocery.cn/categories/tools/"/>
    
    
    <category term="macOS" scheme="https://www.itgrocery.cn/tags/macOS/"/>
    
    <category term="apollo" scheme="https://www.itgrocery.cn/tags/apollo/"/>
    
  </entry>
  
  <entry>
    <title>全链路压测的方案以及实践</title>
    <link href="https://www.itgrocery.cn/posts/de7d807b/"/>
    <id>https://www.itgrocery.cn/posts/de7d807b/</id>
    <published>2020-03-04T08:19:04.000Z</published>
    <updated>2023-05-06T06:48:10.332Z</updated>
    
    <content type="html"><![CDATA[<p>全链路压测是在真实的业务场景，线上的系统环境，发送海量的请求来测试整个核心链路的过程。这个概念在此之前完全没有听说过，问过一些做开发测试的同学，他们对这块还有所了解。这种方案一般大厂里面实践的比较多，小厂的测试完全没有必要这么做。因为这种方案主要是用来测试即将到来的大促等高并发场景，提前验证线上应用的稳定性，及时发现线上应用的性能瓶颈。</p><span id="more"></span><h2 id="方案架构"><a href="#方案架构" class="headerlink" title="方案架构"></a>方案架构</h2><p>全链路压测的方案是领导设计的，自己参与了核心代码的编写工作，凭借着记忆与理解画出了下面的架构图，方便读者理解。</p><img data-src="/posts/de7d807b/15833145168812.jpg" class=""><p>全链路压测主要的代码都在解决流量压测标的透传问题，如果压测标无法从上游传递到下游，下游就无法判断流量类型。涉及到流量标透传的相关组件主要有线程池、日志、HTTP、RPC、数据库、缓存、消息队列、外部服务等。上述相关的组件与公司项目的架构有很大的关联，不同的公司选择的技术栈也不同，下面会详细讲解这些组件是如何解决流量标透传问题的。</p><h2 id="方案实践"><a href="#方案实践" class="headerlink" title="方案实践"></a>方案实践</h2><h3 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h3><p>一般对外的接口都是使用 HTTP 的方式暴露的，HTTP 是一个比较通用的协议，一般我们会通过 Header 的方式传递额外的信息。例如 key 是“_xxx_context”，value 是你需要携带的数据，可以是普通的字符串，也可以传输 json，但是要注意控制 value 的长度，因为 web server 有限制 header 的长度，具体规则可以参看该<a href="https://www.tutorialspoint.com/What-is-the-maximum-size-of-HTTP-header-values">网页</a>的内容。</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>线程池是日常开发中经常会用到的技术，特别是异步处理的任务。对于线程间数据的隔离 JDK 给我们提供的 API 是 ThreadLocal，但 ThreadLocal 并不能在父子线程中传递数据，当然有人会说可以使用 InheritableThreadLocal,没错 InheritableThreadLocal 确实可以实现父子线程上下文的传递，但对于线程复用的场景（线程池）,子线程对应的父线程会不断变更，然而 InheritableThreadLocal 在子线程中不会同步进行更新操作。那么该如何解决这个问题呢？对于业界的 Java 大厂阿里，它们肯定也会遇到这个问题，所以可以使用阿里开源的 <a href="https://github.com/alibaba/transmittable-thread-local">transmittable-thread-local</a>，这个框架可以解决线程复用场景下上下文传递的问题。</p><h3 id="代码织入"><a href="#代码织入" class="headerlink" title="代码织入"></a>代码织入</h3><p>代码织入总体来说就是增强你代码的功能，为什么要使用代码织入技术，主要还是减少业务方代码改造的成本。例如上面的线程池问题，总不能让业务方自己去改造线程相关的代码吧，这样成本太高，利用代码织入技术可以有效减少改造量。代码增强总的来说有两种途径，一种是 JavaAgent，另外一种是 Java 的动态代理技术，这两种技术显著的差异就是对业务代码侵入性的程度。对于前者优点是依赖较少、功能强大，缺点是技术比较冷门，需要丰富的经验，最终我们选择的是 JavaAgent 这种方式，具体的技术使用的是 AspectJ。一开始没有接触过 AspectJ，使用过程中也遇到一些坑，例如无法增强 JDK 的源码，所以像线程池这类代码你只能从外部调用处考虑切点，还有 AspectJ 不要增强自身需要使用的一些代码，例如我想增强线程池，但是自身又使用了 log4j2 异步日志的功能，这样就会死循环的状态，所以使用 AspectJ 的时候一定要注意选择好切点，避免出现无效或者死循环的问题。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库是业务应用基本上都会接入的组件，如果处理不好，很容易出现数据混乱的问题。针对全链路压测，业界的选择是构造影子库或者影子表。为了节省资源，我们选择的是影子表的方案，因为这种不用再申请额外的数据库，在同一个数据库中创建所有表的影子表，影子表在原表名的基础上加上“_shadow”的后缀，当然表结构也要做变动，我们的处理方式就是在原表的基础上再添加一个字段“xxx_SHADOW”，这样影子流量的数据无法插入到正常的表中。表结构构造完成后，需要做数据的迁移，因为影子流量操作的都是影子表，需要将一些字典表类的数据从原表迁移到影子表，对于不影响流程的表可以不做迁移，例如订单表，因为这类表的数据量往往非常大，迁移起来很耗时。</p><p>数据库涉及到的另一个组件就是 ORM 框架，我们不可能让业务人员自己根据流量类型来修改 SQL，需要在 ORM 框架层做统一的封装。目前国内公司使用的都是 MyBatis 框架，借助 MyBatis 的 Interceptor 可以自行添加 SQL 修改的逻辑。SQL 的修改可以使用阿里开源的 Druid，对于 MySQL 支持的非常好，需要注意的是修改的 SQL 语句要覆盖全业务场景，特别是冷门的 SQL，不要因为使用率低而不考虑进去。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存的种类有很多种，例如本地缓存，分布式缓存。根据使用率我们改造的是 Redis，因为这种缓存最通用。Redis 总共有 256 个 DB，我们可以选择一个 DB 作为影子库，例如最后一个，影子流量的缓存操作都在 DB255 上面进行，对于 Key 也可以做改造，避免出现了问题无法排查的情况，可以在原 Key 的基础上添加前缀“xxx_SHADOW”。因为 Redis 的相关框架没有提供扩展的功能，所以需要使用代码织入技术，将切点选择在 Redis 的调用处。</p><h3 id="消息队列和-RPC"><a href="#消息队列和-RPC" class="headerlink" title="消息队列和 RPC"></a>消息队列和 RPC</h3><p>对于消息队列和 RPC 框架的处理方式与 HTTP 的方案类似，如果是消息队列，例如 RabbitMQ、RocketMQ，可以在请求的 Header 中附带流量标，对于 RPC，例如 Dubbo 可以利用 Filter 在请求的上下文中附带流量标。</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>压测一般会发出大量的请求，相应的日志也会非常多，压测流量的日志很容易覆盖正常流量的日志。所以我们选择改写 log4j2 的 appender，根据流量类型将日志写入影子目录中，并且配置默认的删除策略，例如日志只保存一天。</p><h3 id="第三方接口"><a href="#第三方接口" class="headerlink" title="第三方接口"></a>第三方接口</h3><p>对于第三方接口，例如支付，我们不可能将压测流量的请求打过去，所以需要改写请求的逻辑，将 Mock 的逻辑保存在 Mock 平台上面，业务人员根据流量类型选择走真实的逻辑还是 Mock 的逻辑。至于 Mock 相关的代码处理，目前是让业务人员自行编码处理的，如果 Mock 的接口非常多，这样做肯定不可取，而且不利于维护，可以考虑使用 AOP 技术进行统一封装。至于 Mock 类型，可以根据业务场景决定，比较通用的类型例如成功请求的 Mock，失败请求的 Mock，限流请求的 Mock 等。</p><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>做全链路压测，监控是非常重要的，要能追溯到每个请求的调用链，这样除了问题才方便排查。我们选择的监控是 Cat，当然还有自研的 APM，对于 Cat 可以使用它的 API 自行埋点，非常方便，如果没有自研的 APM ，使用 Cat 是一个不错的选择。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;全链路压测是在真实的业务场景，线上的系统环境，发送海量的请求来测试整个核心链路的过程。这个概念在此之前完全没有听说过，问过一些做开发测试的同学，他们对这块还有所了解。这种方案一般大厂里面实践的比较多，小厂的测试完全没有必要这么做。因为这种方案主要是用来测试即将到来的大促等高并发场景，提前验证线上应用的稳定性，及时发现线上应用的性能瓶颈。&lt;/p&gt;</summary>
    
    
    
    <category term="test" scheme="https://www.itgrocery.cn/categories/test/"/>
    
    
    <category term="full-chain" scheme="https://www.itgrocery.cn/tags/full-chain/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 中关于字间距的研究与总结</title>
    <link href="https://www.itgrocery.cn/posts/b0b90e54/"/>
    <id>https://www.itgrocery.cn/posts/b0b90e54/</id>
    <published>2020-01-12T10:45:23.000Z</published>
    <updated>2023-05-06T06:48:10.332Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都是用 Markdown 来书写技术文档，Markdown 这东西是老外发明的，对于中文并没有太多的说明。最开始接触 Markdown 时并没有关注太多的语法规则，现在看以前的 Markdown 文档，格式太混乱，经过这几年的接触和学习，这里总结一份自用的规范指南，主要是介绍空格以及换行的使用场景。</p><span id="more"></span><h2 id="文件名规则"><a href="#文件名规则" class="headerlink" title="文件名规则"></a>文件名规则</h2><p>一开始写 Markdown 文档时肯定会创建本地文件，对于文件名网上很多文章推荐使用全英文，并且使用“-”连字符作为分隔符，而且文件名中不能出现空格。但是我在写 Hexo 博客的时候养成的习惯是使用标题作为文件名，这样很方便我日后查询，但这种习惯跟官方推荐的大相径庭，不过按照标题的命名方式确实存在一些问题，例如带有中文、空格的链接使得 Gitalk 不能正常工作，不利于 SEO 等。为了解决中文文件名的问题，后来发现 Hexo 有 <a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 这个插件，这个插件会根据标题算出一个唯一标识，这样不仅可以让文章的网址唯一，也解决了标题中文、空格的问题。</p><h2 id="空格的使用"><a href="#空格的使用" class="headerlink" title="空格的使用"></a>空格的使用</h2><p>其实 Markdown 的英文规范大家在学习英文的过程中都有所了解，主要是的中文、英文、数字混排时的间距问题，大家可以查看一下网上的博客，风格迥异，甚至相同的场景间距也不一致。我在最开始写 Markdown 的时候也是这样随意空格，因为那个时候都不知道混排需要注意间距。在后来不断的写作中发现了混排需要注意间距的问题，这里整理一下自己在写作中需要注意间距的场景。</p><h3 id="1-中文与英文"><a href="#1-中文与英文" class="headerlink" title="1. 中文与英文"></a>1. 中文与英文</h3><p>这种场景很常见，因为写技术文档很多名词都是英文，如果将其翻译成中文会别扭。中文与英文最明显的区别在于中文的最小单位是字，而英文的最小单位是词，如果中文和英文组成的部分都是由词组成的，那么中文和英文之间添加空格很正常。但是如果某些场景下某个词是由中文和英文组成的，那么中间是否需要添加空格呢？这个问题我查阅过很多资料，没有发现一个绝对有说服力的规范，感觉这种就像个人喜好一样，两者都是合理的。不过后来我去 Apple 的官网查阅了一些说明文档，Apple 这样的大公司对于中英文的空格规范是一律添加空格，即使对于 APP 的命名上也是如此，例如“查找 iPhone”，另外我也去查阅了阿里云的官网，发现中英文的间距风格并不统一，有的有空格，有的没有，当然国内的 APP 命名却很同意，中英文之间不添加空格，例如“BOSS直聘”、“Metro大都会”。综上所述是否添加空格我个人的看法是如果是中英文组成的名词或者品牌可以选择不加，因为本身就是一个整体，加了之后有种割裂感，但是中英文组成的句子还是要加上空格的。</p><p>错误示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这段代码使用Java语言编写的。</span><br></pre></td></tr></table></figure><p>正确示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这段代码使用 Java 语言编写的。</span><br></pre></td></tr></table></figure><h3 id="2-中文与数字"><a href="#2-中文与数字" class="headerlink" title="2. 中文与数字"></a>2. 中文与数字</h3><p>中文与数字的组合一般常见在时间的表达以及计量单位上面，这方面通过网上查阅资料得出的结论是可以添加空格，也可以不添加，但是风格必须统一。但如果数字后面其实是与英文组成的名词，这种场景还是需要添加空格的。我个人的偏好是不添加空格，因为整体上来说添加空格的场景能少则少，这样也方便我们记忆，否则很容易混淆。</p><p>错误示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我买了一部64GB版本的 iPhone XR。</span><br></pre></td></tr></table></figure><p>正确示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我买了一部 64GB 版本的 iPhone XR。</span><br><span class="line"></span><br><span class="line">在2020年1月10号我买了2台电脑。</span><br><span class="line"></span><br><span class="line">在 2020 年 1 月 10 号我买了 2 台电脑。</span><br></pre></td></tr></table></figure><h3 id="3-英文与数字"><a href="#3-英文与数字" class="headerlink" title="3. 英文与数字"></a>3. 英文与数字</h3><p>数字与英文的场景基本上也是计量单位上面，如果数字后面紧跟的英文是大写英文名词，则不需要添加空格，如果后面紧跟的英文是词组，这种情况下是需要添加空格的。</p><p>错误示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的手机容量有64 GB。</span><br></pre></td></tr></table></figure><p>正确示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的手机容量有64GB。</span><br></pre></td></tr></table></figure><h3 id="4-中文与符号"><a href="#4-中文与符号" class="headerlink" title="4. 中文与符号"></a>4. 中文与符号</h3><p>中文与符号很容易碰到一起，例如逗号、句号、感叹号等，这些符号与中文在一起的时候不需要添加空格，但需要注意的是这些符号需要使用全角的符号，不要弄成了半角符号。</p><h3 id="5-英文与符号"><a href="#5-英文与符号" class="headerlink" title="5. 英文与符号"></a>5. 英文与符号</h3><p>在写中文文档的时候，如果英文前面或者后面是标点符号，这种场景也不必添加空格。</p><p>错误示范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我买了一台最新款的 Mac Pro 。</span><br></pre></td></tr></table></figure><p>正确示范</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我买了一台最新款的 Mac Pro。</span><br></pre></td></tr></table></figure><h2 id="空行的使用"><a href="#空行的使用" class="headerlink" title="空行的使用"></a>空行的使用</h2><p>这里的换行主要指的是 Markdown 中各大标记之间是否需要添加空行，就像代码中函数之间是否需要空行一样，主要是提升观感。这部分网上也没有查到具体的说明，我个人的喜好是如果标记之间需要添加换行符，例如标题符号与段落之间，代码块与段落之间等。但有一种场景除外，那就是列表，因为它们本身就是一体的。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://lujianan.com/2017/01/20/markdown-standard/">Markdown 中文技术文档的写作规范</a></li><li><a href="http://einverne.github.io/markdown-style-guide/zh.html#file-extension">Markdown 书写风格指南</a></li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines">chinese-copywriting-guidelines</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直以来都是用 Markdown 来书写技术文档，Markdown 这东西是老外发明的，对于中文并没有太多的说明。最开始接触 Markdown 时并没有关注太多的语法规则，现在看以前的 Markdown 文档，格式太混乱，经过这几年的接触和学习，这里总结一份自用的规范指南，主要是介绍空格以及换行的使用场景。&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="https://www.itgrocery.cn/categories/blog/"/>
    
    
    <category term="markdown" scheme="https://www.itgrocery.cn/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Canal Admin 搭建 Canal 集群以及体验</title>
    <link href="https://www.itgrocery.cn/posts/99c08147/"/>
    <id>https://www.itgrocery.cn/posts/99c08147/</id>
    <published>2020-01-10T10:03:03.000Z</published>
    <updated>2023-05-06T06:48:10.332Z</updated>
    
    <content type="html"><![CDATA[<p>Canal 是阿里巴巴开源的一套分布式数据库同步系统，目前主要支持 MySQL、RDS。Canal 的主要原理是伪装成 MySQL 的 Slave 节点，监听 MySQL 主库的 binlog 文件，根据 binglog 将数据库事件发送到 MQ 中，消费端可以订阅 MQ 中的消息。为了方便 Canal 的运维人员，阿里还提供了 Canal Admin 这个运维平台，使用户可以快速和安全的操作。</p><span id="more"></span><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>Canal Admin 的使用需要依赖 MySQL、Canal 、Zookeeper 这三个服务，在使用 Canal Admin 之前我已经体验过单机节点的搭建，这里列一下三个服务使用的版本：</p><ol><li>MySQL 5.6</li><li>Canal 1.1.4</li><li>Zookeeper 3.4.10</li></ol><p>为了更加方便的了解 Canal Admin 的作用，下面根据理解画了一下整体的架构图，根据架构图可以帮助我们理解整个系统运行的逻辑，出现问题也更加方便排查。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786508860209.jpg"></p><h2 id="部署-Canal-Admin"><a href="#部署-Canal-Admin" class="headerlink" title="部署 Canal Admin"></a>部署 Canal Admin</h2><p>Canal Admin 是跟随着 Canal 一起发布的，可以去 Canal 的 Release 模块下面下载对应版本的 Canal Admin，我这里下载的是”canal.admin-1.1.4.tar.gz“。</p><h3 id="配置-application-xml"><a href="#配置-application-xml" class="headerlink" title="配置 application.xml"></a>配置 application.xml</h3><p>当压缩包下来之后进行加压缩，比较重要的配置 conf 目录下面的 application.yml 文件，里面涉及到 Canal Admin 的数据库连接配置以及管理员信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8089</span><br><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    date-format: yyyy-MM-dd HH:mm:ss</span><br><span class="line">    time-zone: GMT+8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring.datasource:</span><br><span class="line">  address: 127.0.0.1:3306</span><br><span class="line">  database: canal_manager</span><br><span class="line">  username: root</span><br><span class="line">  password: root</span><br><span class="line">  driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">  url: jdbc:mysql://$&#123;spring.datasource.address&#125;/$&#123;spring.datasource.database&#125;?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span><br><span class="line">  hikari:</span><br><span class="line">    maximum-pool-size: 30</span><br><span class="line">    minimum-idle: 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">canal:</span><br><span class="line">  adminUser: admin</span><br><span class="line">  adminPasswd: 123456</span><br></pre></td></tr></table></figure><h3 id="初始化-MySQL"><a href="#初始化-MySQL" class="headerlink" title="初始化 MySQL"></a>初始化 MySQL</h3><p>因为 Canal Admin 是一个管理系统，需要使用数据库存放配置信息，只用在 MySQL 中执行 Canal Admin 提供的数据库初始化文件即可，该文件在“conf&#x2F;canal_manager.sql”路径下面。</p><h3 id="新建集群"><a href="#新建集群" class="headerlink" title="新建集群"></a>新建集群</h3><p>上面的 Canal Admin 配置好了之后直接根据“&#x2F;bin&#x2F;startup.sh”启动 Canal Admin 即可，在浏览器上面输入”ip:8089”即可进入到管理页面，如果使用的默认的配置信息，用户名入”admin”，密码输入”123456”即可访问首页。</p><p>进入到首页点击集群的菜单栏，然后选择新建集群。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786509043984.jpg"></p><p>在里面输入集群的名称以及 Zookeeper 即可，这里的集群目前还没有任务节点，后续通过配置 Canal Server 的自动注册功能，便可以查看该集群下面拥有的节点。</p><h2 id="启动-Canal-Server"><a href="#启动-Canal-Server" class="headerlink" title="启动 Canal Server"></a>启动 Canal Server</h2><p>因为这里使用 Canal Admin 部署集群，所以 Canal Server 节点只需要关注 manager 相关的信息即可，具体的任务信息后续都通过 Canal Admin 下发，这一点与单机部署区别很大。</p><p>在 Canal 的配置目录下，有两个 canal 前缀的配置项，其中一个文件名是”canal_local.properties”，这是 Canal Admin 官网介绍的集群部署需要修改的配置文件，里面的配置信息相比”canal.properties”要少很多，多余的信息在集群模式下都由 Canal Admin 管理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># register ip</span><br><span class="line"></span><br><span class="line">canal.register.ip = 10.37.129.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># canal admin config</span><br><span class="line"></span><br><span class="line">canal.admin.manager = 10.37.129.3:8089</span><br><span class="line"></span><br><span class="line">canal.admin.port = 11110</span><br><span class="line"></span><br><span class="line">canal.admin.user = admin</span><br><span class="line"></span><br><span class="line">canal.admin.passwd = 6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9</span><br><span class="line"></span><br><span class="line"># admin auto register</span><br><span class="line"></span><br><span class="line">canal.admin.register.auto = true</span><br><span class="line"></span><br><span class="line">canal.admin.register.cluster = xxx_cluster</span><br></pre></td></tr></table></figure><p>上面配置信息中有几个地方要注意一下，这里简短介绍一下。第一个是”canal.register.ip”，这个配置用来指定当前 Canal Server 的 IP 信息，如果主机是多网卡，可以避免 IP 信息错乱的问题。第二个是”canal.admin.passwd”，这里的密码就是之前配置 Canal Admin 里面配置的管理员密码，只不过这里并不是明文展示，使用 MySQL 的”select password(“123456”)”语句查询处理过的密码，注意查询结果前面的”*”要去掉。第三个是”canal.admin.register.auto”，这里是自动注册的意思，如果没有配置，Canal Server 启动后需要自行在 Canal Admin 上面添加。第四个是”canal.admin.register.cluster”，这个配置如果不写代表当前的 Canal Server 是一个单机节点，如果添加的名字在 Canal Admin 上面没有提前注册，Canal Server 启动时会报错。</p><p>如果你的集群需要部署多个 Canal Server，将上面的配置复制到另外几台机器上面，主要别忘记修改 IP 信息，配置好所有的节点之后启动即可，这些节点会自动注册到 Canal Admin。</p><h2 id="配置-Canal-Server"><a href="#配置-Canal-Server" class="headerlink" title="配置 Canal Server"></a>配置 Canal Server</h2><p>通过上面的操作之后所有的 Canal Server 便可以在 Canal Admin 上面看到，接着可以通过 UI 界面配置 Canal Server。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786510267775.jpg"></p><p>从上面的截图可以看到两个节点都归属于同一个集群，如果我们点击单个节点编辑配置，Admin 会提示我们集群模式下不允许修改单个节点的配置，需要在集群下面修改配置。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786510367353.jpg"></p><p>下面通过集群管理页面修改 Canal Server 的配置，主要是添加 Canal Server 需要对接的 MQ。一开始进入的时候是空白的，我们可以选择载入模板，然后根据模板修改自己关注的配置。为了对接 MQ，需要在配置中指定”canal.serverMode”，我这里配置的是“RocketMQ”，另外一个配置就是 MQ 的连接信息“canal.mq.servers”。</p><p>指定消息队列为 RocketMQ。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786510463073.jpg"></p><p>配置 RocketMQ 的连接信息。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786510581747.jpg"></p><h2 id="创建-Canal-Instance"><a href="#创建-Canal-Instance" class="headerlink" title="创建 Canal Instance"></a>创建 Canal Instance</h2><p>Canal Admin 提供了 Canal Instance 的管理功能，我们可以通过 UI 界面添加需要监听的数据库，让该 Instance 消费 binlog 并将事件发送到 MQ。</p><p>点击“新建 Instance”按钮创建 Instance。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786510677512.jpg"></p><p>修改”canal.instance.mysql.slaveId”和”canal.instance.master.address”。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786510768090.jpg"></p><p>查看 Instance 日志，判断 Instance 是否配置正确。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-01-10 14:46:50.800 [destination = parallels_mysql5.6 , address = /10.37.129.3:3306 , EventParser] WARN  c.a.o.c.p.inbound.mysql.rds.RdsBinlogEventParserProxy - ---&gt; find start position successfully, EntryPosition[included=false,journalName=mysql-bin.000007,position=104805,serverId=1,gtid=,timestamp=1578638732000] cost : 7ms , the next step is binlog dump</span><br></pre></td></tr></table></figure><h2 id="测试-MySQL-事物"><a href="#测试-MySQL-事物" class="headerlink" title="测试 MySQL 事物"></a>测试 MySQL 事物</h2><p>创建好了 Canal Instance 之后，就可以通过消费者消费 MQ 里面的数据库事件了。对于普通的操作例如新增、修改、删除等操作都是没有问题，下面可以来测试一下事物比较特殊的场景。其实只需要验证未提交的事物是否会产生 binlog 即可推测出结果。</p><h3 id="关闭自动提交"><a href="#关闭自动提交" class="headerlink" title="关闭自动提交"></a>关闭自动提交</h3><p>为了测试事物，可以将当前会话的自动提交关闭。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set @global.autocommit=0;</span><br></pre></td></tr></table></figure><p>查询当前自动提交是否关闭。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set @@session.autocommit=0;</span><br></pre></td></tr></table></figure><h3 id="开始测试事物"><a href="#开始测试事物" class="headerlink" title="开始测试事物"></a>开始测试事物</h3><p>当我们关闭自动提交之后就要定位 binlog 当前最后的位置，这样后续写入数据时但是没有提交时可以判定 binlog 是否有写入。</p><p>查找最后一个 binlog 的文件名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show binary logs;</span><br></pre></td></tr></table></figure><p>查看最后一个 binlog 最后的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show binlog events in &#x27;mysql-bin.000007&#x27;;</span><br></pre></td></tr></table></figure><p>我这里查找到的结果是 106667。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786510995237.jpg"></p><p>执行数据库插入语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `test`.`tb_user`(`username`, `password`, `age`, `nickname`) VALUES (&#x27;testtttttttt&#x27;, &#x27;tttttttttt&#x27;, 3, &#x27;ttttttttttt&#x27;);</span><br></pre></td></tr></table></figure><p>再次查看 binlog 最后的位置。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786511093998.jpg"></p><p>可以看到位置没有发生变化，我的消费端也没有收到数据添加的消息，最后将该次事物提交，然后查看下最后的位置。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786511178983.jpg"></p><p>可以看到 binlog 的位置发生了变化，证明只有事物提交之后才能 binlog 才会写入，我的消费端也接收到了数据库变化的消息。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15786511271747.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Canal 是阿里巴巴开源的一套分布式数据库同步系统，目前主要支持 MySQL、RDS。Canal 的主要原理是伪装成 MySQL 的 Slave 节点，监听 MySQL 主库的 binlog 文件，根据 binglog 将数据库事件发送到 MQ 中，消费端可以订阅 MQ 中的消息。为了方便 Canal 的运维人员，阿里还提供了 Canal Admin 这个运维平台，使用户可以快速和安全的操作。&lt;/p&gt;</summary>
    
    
    
    <category term="cookbook" scheme="https://www.itgrocery.cn/categories/cookbook/"/>
    
    <category term="etl" scheme="https://www.itgrocery.cn/categories/cookbook/etl/"/>
    
    
    <category term="canal-admin" scheme="https://www.itgrocery.cn/tags/canal-admin/"/>
    
    <category term="canal" scheme="https://www.itgrocery.cn/tags/canal/"/>
    
  </entry>
  
  <entry>
    <title>上海移动八元套餐最新（2020）办理教程</title>
    <link href="https://www.itgrocery.cn/posts/8c479faa/"/>
    <id>https://www.itgrocery.cn/posts/8c479faa/</id>
    <published>2020-01-01T03:36:00.000Z</published>
    <updated>2023-05-06T06:48:10.332Z</updated>
    
    <content type="html"><![CDATA[<p>目前 5G 已经商用，然而资费是越来越贵，目前使用的移动号是第一次来上海办理的，记得当时选号的时候有两个尾号，一个是“114”，另外一个是“404”，作为程序员觉得“404”觉得不吉利所以选择了“114”。之前移动一直用的是88元套餐，流量只有 10GB，后面有一张电信的卡（企业套餐），30元有 20GB 流量。在网上一直听说移动有八元套餐，去营业厅咨询想办最便宜的套餐，营业员给我推荐的是18元套餐，最后在 <a href="https://www.v2ex.com/t/634035#reply20">V2EX</a> 询问，根据网友提示终于成功自行办理八元保号套餐。</p><span id="more"></span><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>并不是所有的移动号都可以办理的，这里说一下我办理过程遇到的波折。我之前上海移动有办理合约套餐，后果就是套餐不能随便换，也不能携号转网。好在2020年了，之前的合约套餐都到期了，后面移动的客服打电话叫我办理合约套餐都直接拒绝了，不过移动客服人员也会选择使用私人号码给你推荐套餐。一开始我也不知道如何自行办理这个八元套餐，就想去淘宝看看有没有人可以代办，结果还真有，支付了15块之后，客服人员准备帮我办理，结果发现我是后付费套餐用户，而这个八元套餐是预付费的，后付费转预付费必须到营业厅，最后去营业厅顺利将套餐改为了预付费套餐。回来后我一直在琢磨，为啥淘宝的店家可以帮我办理套餐，肯定有啥特殊通道是我不知道的，最后 V2EX 的网友提示我去知乎看某位网友写的帖子，经过自己的尝试，最终成功了。</p><p>下面总结一下前提条件：</p><ol><li>没有合约套餐</li><li>预付费用户</li></ol><p>上面列举的可能不全，如果网友还有其他障碍没能办理成功，可以下面留言交流。</p><h2 id="办理"><a href="#办理" class="headerlink" title="办理"></a>办理</h2><p>其实上海移动的官网就能自行办理，只是这个入口比较坑爹，一般渠道不容易发现。我们在百度搜索上海移动时点击进入的官网感觉是一个阉割版的，少了很多功能，而知乎网友给出的网址功能会多一些，其实百度的第二个结果就是知乎网友的地址。</p><p><img data-src="https://site.itgrocery.cn/2020/media/15778519763108.jpg" alt="-w1250"></p><p>百度官网进入的网址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.10086.cn/index/sh/index_210_210.html</span><br></pre></td></tr></table></figure><p>知乎网友给出的网址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.sh.10086.cn/service/static/</span><br></pre></td></tr></table></figure><p>下面介绍一下如何进入办理八元套餐的页面，按照操作即可，如果移动后面下线了这个入口就没办法了，想办理的要抓紧时间办理。移动后面的政策肯定是要培养用户高消费的习惯，以前上大学的时候话费不过二、三十块钱，现在随便合适的套餐八、九十块钱，虽然工作了这点钱不是很在乎，但心里还是不爽的。</p><p>点击“自由选套餐”链接：</p><p><img data-src="https://site.itgrocery.cn/2020/media/15778522411055.jpg" alt="-w1221"></p><p>进入套餐选择页面：</p><p><img data-src="https://site.itgrocery.cn/2020/media/15778522889657.jpg" alt="-w977"></p><p>你以为登录账号选好套餐就可以办理成功了吗，太天真了，如果真的是这样网友换个套餐也不会跟客户各种撕、各种投诉了。我当时操作的时候使用的是 Chrome 浏览器，结果提交的时候直接提示服务器错误。因为是晚上操作的，当时还真以为是服务器维护，后来想了一下好像有网友提示过要在 IE 浏览器下面操作，果断打开 Parallels 的 Windows10 虚拟机，使用传统的 IE 浏览器重新登录一遍账号、选好套餐，最后点击立即更换，这一次服务器正确响应了。在选这个套餐的时候会有调查问卷让你填，问题为什么要换这个套餐，我选了一个“资费太贵”选项。</p><p>办理成功之后页面截图：</p><p><img data-src="https://site.itgrocery.cn/2020/media/15778528631809.jpg" alt="-w973"></p><p>最后给出一脸苦逼的头像，看来移动也不爽你选这个最便宜的套餐。</p><p>办理成功之后的短信提示：</p><p><img data-src="https://site.itgrocery.cn/2020/media/15778535329693.jpg"></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>因为我选择的是语音套餐，没有流量，为了防止不小心打开了移动卡的流量开关，最后决定关闭移动的移动网络，这个操作也是可以自行办理的。</p><p>点击“上网”后面的更过链接：</p><p><img data-src="https://site.itgrocery.cn/2020/media/15778539491512.jpg" alt="-w1253"></p><p>选择“移动数据标准资费”：</p><p><img data-src="https://site.itgrocery.cn/2020/media/15778540043474.jpg" alt="-w1043"></p><p>进入套餐关闭页面：</p><p><img data-src="https://site.itgrocery.cn/2020/media/15778540588749.jpg" alt="-w1015"></p><p>如果你的状态是已开通，那么这里会有关闭操作的按钮，这个标准资费是30元 1GB 的流量，肯定是用不起的。之前那个八元套餐提示的是50元 1GB，不知道关闭标准资费是否能完全关闭流量功能，下个月就能知晓了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前 5G 已经商用，然而资费是越来越贵，目前使用的移动号是第一次来上海办理的，记得当时选号的时候有两个尾号，一个是“114”，另外一个是“404”，作为程序员觉得“404”觉得不吉利所以选择了“114”。之前移动一直用的是88元套餐，流量只有 10GB，后面有一张电信的卡（企业套餐），30元有 20GB 流量。在网上一直听说移动有八元套餐，去营业厅咨询想办最便宜的套餐，营业员给我推荐的是18元套餐，最后在 &lt;a href=&quot;https://www.v2ex.com/t/634035#reply20&quot;&gt;V2EX&lt;/a&gt; 询问，根据网友提示终于成功自行办理八元保号套餐。&lt;/p&gt;</summary>
    
    
    
    <category term="internet" scheme="https://www.itgrocery.cn/categories/internet/"/>
    
    
    <category term="mobile" scheme="https://www.itgrocery.cn/tags/mobile/"/>
    
  </entry>
  
  <entry>
    <title>排查 2.6.x dubbo-admin 消费者管理页面崩溃问题</title>
    <link href="https://www.itgrocery.cn/posts/7a6c0275/"/>
    <id>https://www.itgrocery.cn/posts/7a6c0275/</id>
    <published>2019-12-22T16:00:00.000Z</published>
    <updated>2023-05-06T06:48:10.300Z</updated>
    
    <content type="html"><![CDATA[<p>最近在多 dubbo-admin 的改造，期间发现服务治理模块的消费者页面出现崩溃的问题。看提示视乎时因为 URL 参数解析导致的，接下来分析一下问题出现的原因。</p><span id="more"></span><h2 id="问题表象"><a href="#问题表象" class="headerlink" title="问题表象"></a>问题表象</h2><p>如果发现这个问题，那么后面基本上很大概率会再次出现，出现这个问题时页面会给出提示语句，下面看下错误页面给出的提示信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">There was an unexpected error (type=Internal Server Error,status=500).</span><br><span class="line">Illegal query string &quot;application=xxx&amp;category=consumers&amp;check=falsegroup=&amp;interface=xxx.xxx...&quot;</span><br></pre></td></tr></table></figure><p>看到这个错误信息可以去控制台看下错误日志，找到异常跑出的代码块，我查找到出错的类是“com.alibaba.dubboadmin.registry.common.route.ParseUtils”这个类的“parseQuery”方法。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>上面定位到了代码出错的位置，下面来看看这个方法的代码块，来看看这个方法具体做了哪些操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private static Pattern QUERY_PATTERN = Pattern</span><br><span class="line">            .compile(&quot;([&amp;=]?)\\s*([^&amp;=\\s]+)&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Parse Query String into Map. For strings that have only Key, key3 = &lt;/ code&gt; is ignored.</span><br><span class="line">     *</span><br><span class="line">     * @param keyPrefix In the output of the Map Key plus a unified prefix.</span><br><span class="line">     * @param query Query String，For example: &lt;code&gt;key1=value1&amp;key2=value2&lt;/code&gt;</span><br><span class="line">     * @return When Query String is &lt;code&gt;key1=value1&amp;key2=value2&lt;/code&gt;, and prefix is &lt;code&gt;pre.&lt;/code&gt;,</span><br><span class="line">     *         then &lt;code&gt;Map&#123;pre.key1=value1, pre.key=value2&#125;&lt;/code&gt; will be returned.</span><br><span class="line">     */</span><br><span class="line">    // FIXME Is it reasonable to throw an IllegalStateException??</span><br><span class="line">    public static Map&lt;String, String&gt; parseQuery(String keyPrefix, String query) &#123;</span><br><span class="line">        if (query == null)</span><br><span class="line">            return new HashMap&lt;String, String&gt;();</span><br><span class="line">        if (keyPrefix == null)</span><br><span class="line">            keyPrefix = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        Matcher matcher = QUERY_PATTERN.matcher(query);</span><br><span class="line">        Map&lt;String, String&gt; routeQuery = new HashMap&lt;String, String&gt;();</span><br><span class="line">        String key = null;</span><br><span class="line">        while (matcher.find()) &#123; // Match one by one</span><br><span class="line">            String separator = matcher.group(1);</span><br><span class="line">            String content = matcher.group(2);</span><br><span class="line">            if (separator == null || separator.length() == 0</span><br><span class="line">                    || &quot;&amp;&quot;.equals(separator)) &#123;</span><br><span class="line">                if (key != null)</span><br><span class="line">                    throw new IllegalStateException(&quot;Illegal query string \&quot;&quot;</span><br><span class="line">                            + query + &quot;\&quot;, The error char &#x27;&quot; + separator</span><br><span class="line">                            + &quot;&#x27; at index &quot; + matcher.start() + &quot; before \&quot;&quot;</span><br><span class="line">                            + content + &quot;\&quot;.&quot;);</span><br><span class="line">                key = content;</span><br><span class="line">            &#125; else if (&quot;=&quot;.equals(separator)) &#123;</span><br><span class="line">                if (key == null)</span><br><span class="line">                    throw new IllegalStateException(&quot;Illegal query string \&quot;&quot;</span><br><span class="line">                            + query + &quot;\&quot;, The error char &#x27;&quot; + separator</span><br><span class="line">                            + &quot;&#x27; at index &quot; + matcher.start() + &quot; before \&quot;&quot;</span><br><span class="line">                            + content + &quot;\&quot;.&quot;);</span><br><span class="line">                routeQuery.put(keyPrefix + key, content);</span><br><span class="line">                key = null;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (key == null)</span><br><span class="line">                    throw new IllegalStateException(&quot;Illegal query string \&quot;&quot;</span><br><span class="line">                            + query + &quot;\&quot;, The error char &#x27;&quot; + separator</span><br><span class="line">                            + &quot;&#x27; at index &quot; + matcher.start() + &quot; before \&quot;&quot;</span><br><span class="line">                            + content + &quot;\&quot;.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        /*if (key != null)</span><br><span class="line">        throw new IllegalStateException(&quot;Illegal route rule \&quot;&quot; + query</span><br><span class="line">                + &quot;\&quot;, The error in the end char: &quot; + key);*/</span><br><span class="line">        return routeQuery;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到上面有正则表达式的用法，主要是用来解析 URL(application&#x3D;xxx&amp;category&#x3D;consumers&amp;check&#x3D;false&amp;group&#x3D;&amp;interface&#x3D;xxx.xxx) 中的 Key 和 Value 的。它这里的正则表达式可以查阅出来是“([&amp;&#x3D;]?)\s*([^&amp;&#x3D;\s]+)”。这段代码的核心就是分析这个正则表达式的作用，主体部分是由两个括号组成的，上面的“matcher.group(1)”和“matcher.group(2)”就是用来取这两个括号中匹配到的内容，第一个括号中表示的内容是匹配“&amp;”、“&#x3D;”零次或者一次，第二个括号表示匹配非“&amp;”、“&#x3D;”、“\s”符号的文本。</p><p>根据上面分析的语法规则，第一次匹配到的是“application”，第二次匹配到的是“&#x3D;xxx”，第三次匹配到的是“&amp;category”，第四次匹配到的是“&#x3D;consumers”……，下面根据<a href="https://c.runoob.com/front-end/854">正则表达式测试网站</a>给出完整的匹配结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">共找到 9 处匹配：</span><br><span class="line">application</span><br><span class="line">=xxx</span><br><span class="line">&amp;category</span><br><span class="line">=consumers</span><br><span class="line">&amp;check</span><br><span class="line">=false</span><br><span class="line">&amp;group</span><br><span class="line">&amp;interface</span><br><span class="line">=xxx.xxx</span><br></pre></td></tr></table></figure><p>知道匹配的结果之后再来看看哪些地方会抛异常，上述代码有三个地方会抛出异常，第一处是“key”不为空的时候，正常情况下如果匹配到等号后面的值，“key”就会被置空。但上面有一种情况就是“&amp;group&#x3D;”后面没有值，“&amp;group”后面就直接匹配到了“&amp;interface”，如果连续两次匹配到的是“&amp;xxx”，就会出现“key”没有被置空的情况，上面的异常就是因为这种问题产生的。第二处抛异常是匹配到了 Value，但是没有匹配到 Key，比如漏掉了“&amp;xxx”，连续两次出现了“&#x3D;xxx”。第三种异常还没想到什么情况会遇到，可能永远不会遇到，因为根据表达式的含义“separator”能出现的所有情况都在前面进行处理了。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>这个异常很明显可以看出是 dubbo-admin 和 dubbo 关于参数校验的标准不一样造成的，正常情况下 key 和 value 应该成对出现，我这里为了不想程序报错，允许了这种非正常参数的出现。我这里遇到不成对出现的场景是 node 应用也要去调用 dubbo 的接口，不清楚 node 那边是如何往 zookeeper 写数据的，后续看下 java 中的 dubbo 对于这种非正常的数据是如何处理的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在多 dubbo-admin 的改造，期间发现服务治理模块的消费者页面出现崩溃的问题。看提示视乎时因为 URL 参数解析导致的，接下来分析一下问题出现的原因。&lt;/p&gt;</summary>
    
    
    
    <category term="microservices" scheme="https://www.itgrocery.cn/categories/microservices/"/>
    
    
    <category term="dubbo-admin" scheme="https://www.itgrocery.cn/tags/dubbo-admin/"/>
    
    <category term="regexp" scheme="https://www.itgrocery.cn/tags/regexp/"/>
    
  </entry>
  
  <entry>
    <title>优化 Hexo 提升站点的 SEO</title>
    <link href="https://www.itgrocery.cn/posts/3398c822/"/>
    <id>https://www.itgrocery.cn/posts/3398c822/</id>
    <published>2019-12-20T16:00:00.000Z</published>
    <updated>2019-12-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们的站点搭建好了之后肯定希望越来越多的人来访问我们的网站，这样才能提升自己站点的曝光率。如果有其他渠道，也可以通过引流的方式提升曝光率，否则自己有用的信息都会被无效的信息排斥掉，用户搜索不到价值高的内容，好的文章又被雪藏了。</p><span id="more"></span><h2 id="使用固定链接"><a href="#使用固定链接" class="headerlink" title="使用固定链接"></a>使用固定链接</h2><p>默认情况下 Hexo 文章的链接使用的文件的名称，而且前面还会有日期做分隔。这样的链接有两个问题，一个是文件的名称比较长的话链接也会比较长，而且当文件名称发生变化时自己的链接也会发生变化，原来搜索引擎搜索的索引就失效了，用户看到的就会是你的 404 页面。当然这类问题是有解决方案的，Hexo 有个插件叫做 <a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a>，这个插件会在你的原始文件自动添加上一个名为 ”abbrlink“ 的标签，这个标签就是你网页的固定地址，一般我们初次生成之后就不会再修改，所以网页的地址就固定下来了。</p><p>执行下面的命令进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>在站点的 _config.yml 的 URL 配置下面开启 abbrlink：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: posts/:abbrlink/</span><br></pre></td></tr></table></figure><p>如果你想自己的网页带 html 后缀也是可以的，直接将 abbrlink 后面的 “&#x2F;“ 替换成 “.html”</p><p>添加 abbrlink 自身的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  #support crc16(default) and crc32</span><br><span class="line">  rep: hex    #support dec(default) and hex</span><br></pre></td></tr></table></figure><p>上面配置的应该是 abbrlink 的生成的算法以及格式化的方式，直接给出官方推荐的配置。</p><h2 id="开启-SiteMap"><a href="#开启-SiteMap" class="headerlink" title="开启 SiteMap"></a>开启 SiteMap</h2><p>开启 SiteMap 的目的是为了方便搜索引擎来收录站点的网页，就像站点的地图了，知道站点有哪些网页，对搜索引擎更加友好。</p><p>执行安装 <a href="https://github.com/hexojs/hexo-generator-sitemap">site</a> 的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>我使用的是 Next 主题，所以去主题的 _config.yml 的 menu 节点下面开启 sitemap 选项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p>开启之后就可以在首页的菜单页面看见 Sitemap 的入口，我们可以点击进入查看是否正常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;url&gt;</span><br><span class="line">    &lt;loc&gt;https://itren.tech/about/index.html&lt;/loc&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;lastmod&gt;2019-12-20T17:12:13.028Z&lt;/lastmod&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;url&gt;</span><br><span class="line">    &lt;loc&gt;https://itren.tech/categories/index.html&lt;/loc&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;lastmod&gt;2019-12-20T17:12:13.028Z&lt;/lastmod&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;url&gt;</span><br><span class="line">    &lt;loc&gt;https://itren.tech/tags/index.html&lt;/loc&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;lastmod&gt;2019-12-20T17:12:13.028Z&lt;/lastmod&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;url&gt;</span><br><span class="line">    &lt;loc&gt;https://itren.tech/posts/b493a330/&lt;/loc&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;lastmod&gt;2019-12-20T17:12:13.004Z&lt;/lastmod&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;url&gt;</span><br><span class="line">    &lt;loc&gt;https://itren.tech/posts/684bb6fe/&lt;/loc&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;lastmod&gt;2019-12-20T17:12:13.004Z&lt;/lastmod&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;url&gt;</span><br><span class="line">    &lt;loc&gt;https://itren.tech/posts/5cd9d108/&lt;/loc&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;lastmod&gt;2019-12-20T17:12:13.004Z&lt;/lastmod&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;url&gt;</span><br><span class="line">    &lt;loc&gt;https://itren.tech/posts/67d118b2/&lt;/loc&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;lastmod&gt;2019-12-20T17:12:13.004Z&lt;/lastmod&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;url&gt;</span><br><span class="line">    &lt;loc&gt;https://itren.tech/404.html&lt;/loc&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;lastmod&gt;2019-12-20T17:12:13.004Z&lt;/lastmod&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/url&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/urlset&gt;</span><br></pre></td></tr></table></figure><p>上面就是 sitemap.xml 展示的信息，将站点的全部网页都列举出来了。</p><h2 id="提交网站到搜索引擎"><a href="#提交网站到搜索引擎" class="headerlink" title="提交网站到搜索引擎"></a>提交网站到搜索引擎</h2><p>上面的 sitemap 配置好了之后就可以向 <a href="https://search.google.com/">GoogleSearchConsole</a> 提交我们的站点。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768975014334.jpg" alt="-w768"></p><p>添加网站的时候需要 DNS 验证，按照 Google 给出的提示进行验证。</p><p>完整站点的验证之后提交自己的站点地图，过几天 Google 就会去收录自己的站点。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768976661719.jpg" alt="-w1680"></p><h2 id="解决站点死链"><a href="#解决站点死链" class="headerlink" title="解决站点死链"></a>解决站点死链</h2><p>有时候我们的网页失效了，或者位置变化了，但是 Google 收录的索引一直没有更新，很多用户点击链接时都进入到了 404 页面。为了避免上述的情况发生，我们可以主动向 Google 提交需要删除的 URL。</p><p>目前新版的 GoogleSearchConsole 删除入口还无法进入，需要使用<a href="https://www.google.com/webmasters/tools/removals">链接</a>进入。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768979348245.jpg" alt="-w1667"></p><p>提交 URL 之后过一段时间 Google 就会过来处理，如果提交错了可以取消删除，否则该网页可能永久都不会被 Google 收录。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当我们的站点搭建好了之后肯定希望越来越多的人来访问我们的网站，这样才能提升自己站点的曝光率。如果有其他渠道，也可以通过引流的方式提升曝光率，否则自己有用的信息都会被无效的信息排斥掉，用户搜索不到价值高的内容，好的文章又被雪藏了。&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="https://www.itgrocery.cn/categories/blog/"/>
    
    
    <category term="hexo" scheme="https://www.itgrocery.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用阿里云加速 Hexo 静态博客</title>
    <link href="https://www.itgrocery.cn/posts/67d118b2/"/>
    <id>https://www.itgrocery.cn/posts/67d118b2/</id>
    <published>2019-12-16T16:00:00.000Z</published>
    <updated>2019-12-22T07:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前很多静态博客都是使用 GitHub Pages 来部署的，这个服务对于个人来说非常便捷，不用自己买主机，节省了一笔开销。但因为 GitHub Pages 的服务在国外，国内访问时延迟很高，如果碰上大事件，说不定就直接禁止访问了。如果希望自己站点的访问速度能快点，可以利用云服务来加速自己的网站，因为普通人的站点访问量不大，所以整体费用并不会很高。当然实现这些优化的前提是需要有自己的域名，否则很多功能都将无法使用。</p><span id="more"></span><h2 id="使用全站加速缓存站点"><a href="#使用全站加速缓存站点" class="headerlink" title="使用全站加速缓存站点"></a>使用全站加速缓存站点</h2><p>因为静态站点大部分都是前端资源，所以非常适合做缓存，我目前使用的是阿里云国际提供的全站加速服务。全站加速不仅可以缓存静态资源，对于动态资源还能优化路由，大大提升站点的访问速度。阿里云的全站加速有两种收费方式，一种是流量收费，另外一种是峰值带宽收费，个人站点建议使用流量收费。下面列出阿里云国际站点关于全站加速的收费说明，详情请访问具体<a href="https://www.alibabacloud.com/zh/product/dcdn/pricing?spm=a2c63.p38356.879954.7.319576ad6X5hIH">站点</a>查看。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768561773030.jpg" alt="-w1400"></p><h3 id="1-申请-SSL-证书"><a href="#1-申请-SSL-证书" class="headerlink" title="1. 申请 SSL 证书"></a>1. 申请 SSL 证书</h3><p>目前国内的阿里云和腾讯云都能申请免费的 SSL 证书，但我的域名是在阿里云国际站点申请的，结果最后发现没有申请免费申请证书的入口，好在后来发现了一个可以申请免费证书的<a href="https://freessl.cn/">站点</a>。我在这个站点申请的是 TRUSTAsia 证书，这个服务提供商的证书可以提供给两个域名使用，一个是根域名，另外一个是 www 前缀的站点，我申请带两个域名的证书是因为后面的 OSS 自定义域名的时候需要使用。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768566532341.jpg" alt="-w912"></p><h3 id="2-配置-SSL-证书"><a href="#2-配置-SSL-证书" class="headerlink" title="2. 配置 SSL 证书"></a>2. 配置 SSL 证书</h3><p>当我们申请完 SSL 证书之后就可以在全站加速页面配置我们的域名了。在首页找到全站加速的入口之后点击进入，接着进入域名管理页面。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768569114810.jpg" alt="-w1680"></p><p>点击“配置”按钮之后会进入域名配置页面，接着点击 HTTPS 配置，在该配置页面添加我们证书的公钥和私钥。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768577187705.jpg" alt="-w1680"></p><p>配置完证书之后需要配置一下强制跳转，目的是为了我们在浏览器输入网址时直接跳转到 HTTPS 的网址，不需要用户手动输入 HTTPS 前缀。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768588625829.jpg" alt="-w1678"></p><p>TLS 版本我这里全部都勾选了，目前没有问题，但是下面的 HSTS 我尝试开启之后进入循环重定向，目前还不清楚具体的原因，点击 HSTS 说明的按钮却没有响应。后面经过尝试当开启 HSTS 时需要关闭强制跳转，这样就可以正常访问了。</p><h3 id="3-配置源站信息"><a href="#3-配置源站信息" class="headerlink" title="3. 配置源站信息"></a>3. 配置源站信息</h3><p>HTTPS 配置完成之后接下来配置我们静态站点的信息，“源站信息”是用来告诉“全站加速”我们的原始资源在什么位置，当站点初次被初次访问或者缓存失效时会去回源。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768582414971.jpg" alt="-w1678"></p><p>因为使用了全站加速之后我们访问站点时会先请求全站加速的服务，所以需要将站点域名的 CNAME 设置为基础信息下面展示的 CNAME，接着配置下面的源站信息。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768583815381.jpg" alt="-w1680"></p><p>域名处添加 GitHub 给我们提供的二级域名，如果我们在 GitHub Pages 上面配置了强制 HTTPS，这里就选择 443 端口，如果没有开启可以试试 80 端口。</p><h3 id="3-回源配置"><a href="#3-回源配置" class="headerlink" title="3. 回源配置"></a>3. 回源配置</h3><p>回源配置我目前选择的是“静态协议跟随回源”，配置的协议类型是“跟随”。因为全站加速配置的是 HTTPS 访问，GitHub Pages 也强制开启了 HTTPS，协议类型一样，所以就选择了这样的配置项。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768598565122.jpg" alt="-w1680"></p><p>上面配置成功之后基本上就可以正常访问了，如果有问题可以去阿里云的站点查阅一下资料。后面介绍的配置项是一些优化的功能，可以根据需求选择配置。</p><h3 id="4-动静态加速规则"><a href="#4-动静态加速规则" class="headerlink" title="4. 动静态加速规则"></a>4. 动静态加速规则</h3><p>“动静态规则加速”主要对动态资源和静态资源采用不同的策略进行加速，“全站加速”是根据文件后缀来区分来写是动态资源，哪些是静态资源。我的站点网页是没有后缀的，所以应该是作为动态资源来加速的，这样我们的网页有变动也不会因为缓存的问题造成内容不一致的问题。但是动态资源进行全站加速时会优化路由，选择一条最优的路线来访问我们的页面。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768602492969.jpg" alt="-w1680"></p><h3 id="5-缓存配置"><a href="#5-缓存配置" class="headerlink" title="5. 缓存配置"></a>5. 缓存配置</h3><p>“缓存配置”主要配置的是静态资源的缓存策略，阿里云也有给出推荐，如果长时间不会变动的资源建议配置三个月的时效，经常变动的资源配置十分钟的时效。我将站点的图片、视频、JS 文件都配置为三个月，如果你的站点样式经常变动，可以将 CSS 的时效性配置得更短一些，我配置的是一分钟，站点重新部署后很快就能生效。当然我们也可以利用“刷新预热”功能主动提交 URL 来强制刷新，如果网站长时间没有更新缓存建议用这个方法刷新一下自己的站点。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768605513292.jpg" alt="-w1680"></p><p>我刷新时一般会选择目录，这样目录下面的资源都会被刷新一遍，如果选择的是 URL，那么只有该 URL 的内容会被刷新。</p><h2 id="使用-OSS-加载图片资源"><a href="#使用-OSS-加载图片资源" class="headerlink" title="使用 OSS 加载图片资源"></a>使用 OSS 加载图片资源</h2><h3 id="1-创建-OSS-空间"><a href="#1-创建-OSS-空间" class="headerlink" title="1. 创建 OSS 空间"></a>1. 创建 OSS 空间</h3><p>OSS 的配置还是比较简单的，在对象存储空间点击“创建 Bucket”按钮，选择自己想要存储的区域，国际站点需要实名才能选择大陆区域，我没有实名认证，所以选择的是就近的香港区域。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768607847617.jpg" alt="-w639"></p><h3 id="2-绑定用户域名"><a href="#2-绑定用户域名" class="headerlink" title="2. 绑定用户域名"></a>2. 绑定用户域名</h3><p>选择“域名管理”菜单之后点击“绑定用户域名”按钮就可以配置了，如果域名是阿里云购买的，会自动帮我们添加域名的 CNAME，我这里使用的 www 开头的域名，正好之前的证书可以复用。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768609953374.jpg" alt="-w1680"></p><p>域名添加之后接着添加证书，点击“证书托管”就会进入配置页面。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768611024038.jpg" alt="-w1679"></p><p>证书配置后之后开启 CDN 缓存自动刷新缓存，当我们的 OSS 文件发生变化时，CDN 会自动回源。接下来查看一下阿里云 CDN 加速的状态，如果没问题的话 OSS 的文件就能使用自定义域名进行访问了。</p><p><img data-src="https://site.itgrocery.cn/2019/media/15768613097355.jpg" alt="-w1680"></p><p>这里和之前全站加速的配置类似，因为本质上都是 CDN，一个用来加速 OSS，一个用来加速外部资源而已。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前很多静态博客都是使用 GitHub Pages 来部署的，这个服务对于个人来说非常便捷，不用自己买主机，节省了一笔开销。但因为 GitHub Pages 的服务在国外，国内访问时延迟很高，如果碰上大事件，说不定就直接禁止访问了。如果希望自己站点的访问速度能快点，可以利用云服务来加速自己的网站，因为普通人的站点访问量不大，所以整体费用并不会很高。当然实现这些优化的前提是需要有自己的域名，否则很多功能都将无法使用。&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="https://www.itgrocery.cn/categories/blog/"/>
    
    
    <category term="aliyun" scheme="https://www.itgrocery.cn/tags/aliyun/"/>
    
    <category term="hexo" scheme="https://www.itgrocery.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用阿里云国际入口申请港区 PayPal 账号</title>
    <link href="https://www.itgrocery.cn/posts/5cd9d108/"/>
    <id>https://www.itgrocery.cn/posts/5cd9d108/</id>
    <published>2019-12-15T16:00:00.000Z</published>
    <updated>2019-12-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>正常来说港区 PayPal 账号应该只能使用港区的手机号才可以申请的，最近网上有人写到用大陆的手机号也可以申请港区的账号，便亲自体验一下，发现确实可行，但不保证后续一直可行。至于港区的 PayPal 的用处，我目前已经成功实践过的有绑定阿里云国际版账号、港区 PSN 账号，当然阿里云国际版的账号美区的 PayPal 也可以绑定，但无法绑定港区的 PSN 账号。</p><span id="more"></span><h2 id="进入港区-PayPal-注册页面"><a href="#进入港区-PayPal-注册页面" class="headerlink" title="进入港区 PayPal 注册页面"></a>进入港区 PayPal 注册页面</h2><p>港区的 PayPal 注册页面是没有大陆手机号选项的，但如果你是通过阿里云国际的新增支付方式可以跳转到一个有后门的注册页面，通过这个页面注册便可。因为我是有 Google Voice 账号的，所以很久以前就注册了阿里云国际美国地区的账号，后面利用美区的 PayPal 才激活了阿里云国际账号，如果你没有阿里云国际的账号的话可能会比较尴尬。下面贴出我这里入口的地址，不保证后续在其他电脑上面可以正常访问。</p><p>入口地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.paypal.com/webapps/xoonboarding?token=EC-5DJ07194BP675992X&amp;ba_token=BA-9MD70155JB053533W&amp;country.x=HK&amp;locale.x=zh_HK#/checkout/signup</span><br></pre></td></tr></table></figure><p>注册页面（带后门）：</p><p><img data-src="https://site.itgrocery.cn/2019/media/15765122429543.jpg"></p><p>可以跟正常的注册页面对比下，发现有很大的出入。</p><p>注册页面（正常）:</p><p><img data-src="https://site.itgrocery.cn/2019/media/15765123231384.jpg"></p><h2 id="绑定大陆的国际信用卡"><a href="#绑定大陆的国际信用卡" class="headerlink" title="绑定大陆的国际信用卡"></a>绑定大陆的国际信用卡</h2><p>如果你上面的步骤成功之后便可以绑定国内的国际信用卡了，我尝试过浦发的 E-GO 卡、中信的 VISA 卡，这些都是没有问题的。我的信用卡以前都消费过，所以也没有被风控，如果初次使用被风控的话可以消费几美元再绑定，如果还不行就等个几周吧。但如果长时间被风控，可以考虑注销账号重新注册，因为我之前信用卡申请过限额，并且设置的很低，阿里云国际每天定时扣款但都失败，后来我将 PayPal 账号解绑之后就再也绑定不上了，无奈只能重新注册。至于注册的时候是否可以使用代理，我一般都是挂着代理的，只要不要频繁换代理问题不大。</p><p>阿里云国际和 PSN 付款都是没有问题的：</p><p><img data-src="https://site.itgrocery.cn/2019/media/15765132851195.jpg"></p><p>如果你被风控了但是没有想到可以去消费的地方，可以考虑去一些 Donate 站点进行捐款，如果你没有找到的话可以考虑给我<a href="https://www.paypal.me/itren">捐款</a>😺。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;正常来说港区 PayPal 账号应该只能使用港区的手机号才可以申请的，最近网上有人写到用大陆的手机号也可以申请港区的账号，便亲自体验一下，发现确实可行，但不保证后续一直可行。至于港区的 PayPal 的用处，我目前已经成功实践过的有绑定阿里云国际版账号、港区 PSN 账号，当然阿里云国际版的账号美区的 PayPal 也可以绑定，但无法绑定港区的 PSN 账号。&lt;/p&gt;</summary>
    
    
    
    <category term="internet" scheme="https://www.itgrocery.cn/categories/internet/"/>
    
    
    <category term="paypal" scheme="https://www.itgrocery.cn/tags/paypal/"/>
    
  </entry>
  
  <entry>
    <title>利用 Caddy 伪装 SSR 的流量</title>
    <link href="https://www.itgrocery.cn/posts/684bb6fe/"/>
    <id>https://www.itgrocery.cn/posts/684bb6fe/</id>
    <published>2019-12-14T16:00:00.000Z</published>
    <updated>2019-12-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名面向 Google 编程的程序员，如何在墙内使用代理变成了一个问题。记得最初开发 Android 应用的时候，需要从网上下载 SDK 来进行开发，一开始 SS 并不流行，只能使用第三方服务商的提供的代理服务。后面开始接触搬瓦工这类 VPS 提供商，购买 VPS 并按照网上的教程进行搭建 SS 服务。后来使用 SS 的门槛越来越低，很多人使用网上的脚本便可一键部署。最近传言 SS 的流量已经能被检测出来，所以想着使用 SSR 的流量伪装功能，将代理的流量伪装成正常的 HTTPS 流量。</p><span id="more"></span><h2 id="整体方案"><a href="#整体方案" class="headerlink" title="整体方案"></a>整体方案</h2><p>为了进行伪装，我们主要的目的是让 SSR 可以接受 HTTPS 的请求，让我们的 SSR 服务看起来像一个 HTTPS 服务。之前网上有文章讲述在联通营业厅查询流量类型时，SSR 流量显示的是 HTTPS 流量，证明这个方式目前是 OK 的。整体方案如下：</p><p><img data-src="https://site.itgrocery.cn/2019/media/15764260119229.jpg"></p><h2 id="安装并配置-SSR-服务"><a href="#安装并配置-SSR-服务" class="headerlink" title="安装并配置 SSR 服务"></a>安装并配置 SSR 服务</h2><p>当选好 VPS 服务商之后，就可以开始使用脚本来安装 SSR 服务。我目前使用的是搬瓦工的 GIA 套餐（$37.49 USD），这个套餐是搬瓦工前几次黑色星期五推出的限量版套餐，目前已经绝版，后面推出的 GIA 限量版套餐涨到快五十美刀了，不过配置会稍微高一些。其实搬瓦工的 GIA 套餐是我用过最稳定的 VPS 路线，检验一个 VPS 是否好用在晚高峰期查看丢包率就可以了，我在家使用的是移动宽带，晚高峰比阿里云国际的体验好太多了。接下来使用 SSH 登录 VPS 之后，可以使用 teddysun 提供的一键脚本安装 SSR，下面要做的是需要修改原来的 SSR 配置。</p><p>带有伪装的配置信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_ipv6&quot;:&quot;::&quot;,</span><br><span class="line">    &quot;server_port&quot;:443,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;填写你的密码&quot;,</span><br><span class="line">    &quot;timeout&quot;:120,</span><br><span class="line">    &quot;method&quot;:&quot;none&quot;,</span><br><span class="line">    &quot;protocol&quot;:&quot;auth_chain_a&quot;,</span><br><span class="line">    &quot;protocol_param&quot;:&quot;#&quot;,</span><br><span class="line">    &quot;obfs&quot;:&quot;tls1.2_ticket_auth&quot;,</span><br><span class="line">    &quot;obfs_param&quot;:&quot;填写你需要伪装的域名&quot;,</span><br><span class="line">    &quot;redirect&quot;:[&quot;*:443#127.0.0.1:2333&quot;],</span><br><span class="line">    &quot;dns_ipv6&quot;:false,</span><br><span class="line">    &quot;fast_open&quot;:true,</span><br><span class="line">    &quot;workers&quot;:2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置只是提供一个模板，读者可以根据实际情况自行调整，下面简要介绍一些跟伪装相关的配置项。</p><ul><li>server_port 配置 SSR 暴露的端口，因为我们伪装的是 HTTPS，所以选择 443 端口</li><li>obfs 该配置项配置的混淆的方式，上面配置的是 HTTPS 方式，不需要修改</li><li>obfs_param 配置你这台主机 IP 对应的域名，不要随便配置</li><li>redirect 该配置的作用是当请求是浏览发出的时候，将流量转发给本机的 2333 端口</li></ul><h2 id="安装并配置-Caddy-服务"><a href="#安装并配置-Caddy-服务" class="headerlink" title="安装并配置 Caddy 服务"></a>安装并配置 Caddy 服务</h2><p>上面的 SSR 配置后，443 端口就会被占用，接下来会启动 2333 端口的 Caddy 服务。至于为什么使用 Caddy，主要是利用 Caddy 提供一个 HTTPS 服务，Caddy 可以自动申请 SSL 证书，非常便捷。我目前使用的是 Centos 7 的系统，可以使用 yum 安装 Caddy，剩下只需添加配置即可。</p><p>执行 Caddy 的安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install caddy</span><br></pre></td></tr></table></figure><p>启动 Caddy 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start caddy</span><br></pre></td></tr></table></figure><p>Caddy 启动之后会在 “&#x2F;etc&#x2F;caddy” 目录下面生成配置文件，下面需要修改 “&#x2F;etc&#x2F;caddy&#x2F;conf.d&#x2F;Caddyfile.conf” 这个配置文件，如果没有找到按路径新建一个即可。配置信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http://example.com &#123;</span><br><span class="line">  redir https://example.com&#123;url&#125;</span><br><span class="line">&#125;</span><br><span class="line">https://example.com:2333 &#123;</span><br><span class="line">  gzip</span><br><span class="line">  tls xxx@example.com</span><br><span class="line">  proxy / localhost:9091 &#123;</span><br><span class="line">    transparent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面主要有两个配置项，第一个是配置项是 “example.com”，该配置项是将 HTTP 请求转为 HTTPS 请求，也就是我们在浏览器中输入的是 HTTP 链接时会自动跳转到 HTTPS 类型的链接上。第二项配置是 “example.com:2333”，其中 tls 是自动申请 SSL 证书的邮箱，随便输入一个即可，后面也不会进行验证，”proxy” 配置的是反向代理，代理的是主机 9091 端口的服务，也就是会将 “example.com:2333” 的请求转发到 “localhost:9091” 上。最后需要注意的是配置的这个域名当前指向的一定是这台主机，否者 SSL 证书会申请失败。</p><p>当配置编辑好之后，先输入命令停止 Caddy，然后启动 Caddy 并查看状态，检查 Caddy 是否配置正确。</p><p>停止命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop caddy</span><br></pre></td></tr></table></figure><p>查看状态命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status caddy</span><br></pre></td></tr></table></figure><p>如果状态的信息是 “running”，就说明配置正确了，下面给出我的控制台状态信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">● caddy.service - Caddy HTTP/2 web server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/caddy.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 日 2019-12-15 09:03:04 EST; 3s ago</span><br><span class="line">     Docs: https://caddyserver.com/docs</span><br><span class="line">  Process: 8560 ExecStartPre=/usr/bin/caddy -conf /etc/caddy/caddy.conf -validate (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 8564 (caddy)</span><br><span class="line">   CGroup: /system.slice/caddy.service</span><br><span class="line">           └─8564 /usr/bin/caddy -conf /etc/caddy/caddy.conf -root /tmp -agree</span><br></pre></td></tr></table></figure><p>后面还会有你配置的域名相关的信息，这里就不给出了，当然状态有问题可以自行 Google 找出解决办法。Caddy 的配置比 Nginx 还是简单很多的，如果只需要轻量级的反向代理服务，Caddy 是一个很好的选择。</p><p>如果你需要配置 Caddy 开机自行启动，可以输入如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable caddy</span><br></pre></td></tr></table></figure><h2 id="安装并配置-Web-服务"><a href="#安装并配置-Web-服务" class="headerlink" title="安装并配置 Web 服务"></a>安装并配置 Web 服务</h2><p>我在主机安装的 Web 服务是 Transmission，该服务可以下载 BT 或者 PT，可以用来挂 PT 或者国外的 BT 种子，挂载的时候需要注意主机的磁盘空间以及流量。</p><p>执行如下命令安装 Transmission:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install transmission-cli transmission-common transmission-daemon    </span><br></pre></td></tr></table></figure><p>启动并停止 Transmission:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start transmission-daemon.service</span><br><span class="line">systemctl stop transmission-daemon.service</span><br></pre></td></tr></table></figure><p>启动并停止的目的是为了生成初始的配置文件，方便后续的修改。</p><p>配置必要的 Transmission 选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;rpc-authentication-required&quot;: true,</span><br><span class="line">&quot;rpc-enabled&quot;: true,</span><br><span class="line">&quot;rpc-password&quot;: &quot;mypassword&quot;,</span><br><span class="line">&quot;rpc-username&quot;: &quot;mysuperlogin&quot;,</span><br><span class="line">&quot;rpc-whitelist-enabled&quot;: false,</span><br><span class="line">&quot;rpc-whitelist&quot;: &quot;0.0.0.0&quot;,</span><br></pre></td></tr></table></figure><ul><li>rpc-authentication-required 开启验证，除非你想服务裸奔到外网中</li><li>rpc-password 登录的用户名</li><li>rpc-username 登录的密码</li><li>rpc-whitelist-enabled 允许白名单，记住要关闭，否则只能指定 IP 才能进行登录</li></ul><p>配置好之后重新启动 Transmission，如果你想 Transmission 也能开机启动，输入如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable transmission-daemon.service</span><br></pre></td></tr></table></figure><p>Transmission 默认启用的就是 9091 端口，我们已经将 Transmission 服务反向代理到 Caddy 了。如果我们的 SSR 和 Caddy 服务正常的话，在浏览器中输入主机的域名就会弹出登录框，根据用户名和密码便可登录 Transmission 的管理页面。如果没有按照预期出现登录框，可以检查下是不是因为 VPS 防火墙的原因，防火墙一定要让 443 端口通过。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为一名面向 Google 编程的程序员，如何在墙内使用代理变成了一个问题。记得最初开发 Android 应用的时候，需要从网上下载 SDK 来进行开发，一开始 SS 并不流行，只能使用第三方服务商的提供的代理服务。后面开始接触搬瓦工这类 VPS 提供商，购买 VPS 并按照网上的教程进行搭建 SS 服务。后来使用 SS 的门槛越来越低，很多人使用网上的脚本便可一键部署。最近传言 SS 的流量已经能被检测出来，所以想着使用 SSR 的流量伪装功能，将代理的流量伪装成正常的 HTTPS 流量。&lt;/p&gt;</summary>
    
    
    
    <category term="internet" scheme="https://www.itgrocery.cn/categories/internet/"/>
    
    
    <category term="ssr" scheme="https://www.itgrocery.cn/tags/ssr/"/>
    
    <category term="caddy" scheme="https://www.itgrocery.cn/tags/caddy/"/>
    
  </entry>
  
  <entry>
    <title>JDK 动态代理关于异常的处理</title>
    <link href="https://www.itgrocery.cn/posts/b493a330/"/>
    <id>https://www.itgrocery.cn/posts/b493a330/</id>
    <published>2019-12-13T16:00:00.000Z</published>
    <updated>2019-12-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做接口重试的需求，技术选型是 <a href="https://github.com/rholder/guava-retrying">guava-retrying</a>，这个重试框架自定义程度高，可以自己定义重试的触发条件。业务上重试的都是 Dubbo 的接口，但这些接口会抛出哪些异常是不清楚的。异常的种类主要有 Error、RunTimeException、Exception 这三大类，其中前两种不需要显示的处理的，而后者需要显示的捕获或者抛出，业务方不希望感受到受检异常，因此得确保 Dubbo 接口不会抛出受检异常。Dubbo 生成代理的方式使用的是 Javassist，该框架以前也没有使用过，所以先来看看 JDK 生成的代理类是如果处理异常的。</p><span id="more"></span><h2 id="保存字节码文件"><a href="#保存字节码文件" class="headerlink" title="保存字节码文件"></a>保存字节码文件</h2><h3 id="1-准备测试代码"><a href="#1-准备测试代码" class="headerlink" title="1.准备测试代码"></a>1.准备测试代码</h3><p>下面列出用来测试的代码，主要有三个类，接口、实现类以及入口类。</p><p>接口类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getUserName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserImpl</span> <span class="keyword">implements</span> <span class="title class_">UserInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;参数异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入口类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyInvocationHandler</span> <span class="variable">myInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>(<span class="keyword">new</span> <span class="title class_">UserImpl</span>());</span><br><span class="line">        <span class="type">UserInterface</span> <span class="variable">userInterface</span> <span class="operator">=</span> (UserInterface) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader()</span><br><span class="line">                , <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;UserInterface.class&#125;</span><br><span class="line">                , myInvocationHandler);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> userInterface.getUserName();</span><br><span class="line">        System.out.println(userName);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-启动-HSDB"><a href="#2-启动-HSDB" class="headerlink" title="2.启动 HSDB"></a>2.启动 HSDB</h3><p>HSDB 是一个 HotSpot VM 的调试器，在此之前保存 JDK 动态代理类的字节码都是通过写代码的方式存储的，不是很方便，后来通过查询才得知有这样一个 JVM 调试利器，下面会简要介绍一下如何使用该工具。</p><p>该工具主要在 sa-jdi.jar 这个 jar 包中，我的开发环境是 macOS，下面列出我的环境 jar 包所在的路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/lib/sa-jdi.jar</span><br></pre></td></tr></table></figure><p>打开控制台输入下面的命令就会看到启动的 GUI 界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo java -<span class="built_in">cp</span> /Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/lib/sa-jdi.jar sun.jvm.hotspot.HSDB</span><br></pre></td></tr></table></figure><p>上述命令注意要使用 sudo ，否则后面会 attach 不到 JVM 进程的 ID。至于 Windows 平台，网上说要使用 CMD ，不要使用 PowerShell，没有测试，如果出现问题可以自行尝试。此外也要注意一下当前控制台所在的路径，因为字节码的保存路径是在命令行启动的路径下面。</p><p>HSDB 启动后的界面：</p><p><img data-src="https://site.itgrocery.cn/2019/media/15763293945828.jpg"></p><p>在上述输入框中输入应用程序的进程 ID，然后就可以使用 Tools 中的 Class Browser 功能了：</p><p><img data-src="https://site.itgrocery.cn/2019/media/15763294448983.jpg"></p><p>搜索并保存代理类：</p><p><img data-src="https://site.itgrocery.cn/2019/media/15763294448983.jpg"></p><p><img data-src="https://site.itgrocery.cn/2019/media/15763296063810.jpg"></p><p>控制台所在的路径查看字节码文件：</p><p><img data-src="https://site.itgrocery.cn/2019/media/15763296247769.jpg"></p><p>使用 IDEA 查看字节码文件：</p><p><img data-src="https://site.itgrocery.cn/2019/media/15763296639772.jpg"></p><h2 id="分析字节码文件"><a href="#分析字节码文件" class="headerlink" title="分析字节码文件"></a>分析字节码文件</h2><p>通过上述的操作，来看看 JDK 动态代理生成的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itgrocery.proxy.exception.UserInterface;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">UserInterface</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) &#123;</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;cn.itgrocery.proxy.exception.UserInterface&quot;</span>).getMethod(<span class="string">&quot;getUserName&quot;</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object var1)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m2, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m0, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 getUserName 当中处理的主要有三类异常，一类是 RuntimeException、Error，这一类异常是不需要显示处理，可以直接往外抛，除此之外的其它异常都会被包装成 UndeclaredThrowableException，而 UndeclaredThrowableException 是 RuntimeException 的子类的，所以直接往外抛也是没有问题的。当然上述的例子是我们要代理的方法没有声明要抛出的异常，所以对于受检异常 JDK 代理类只能进行包装，其它形式的接口可以按照上述方式查看源代码。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在做接口重试的需求，技术选型是 &lt;a href=&quot;https://github.com/rholder/guava-retrying&quot;&gt;guava-retrying&lt;/a&gt;，这个重试框架自定义程度高，可以自己定义重试的触发条件。业务上重试的都是 Dubbo 的接口，但这些接口会抛出哪些异常是不清楚的。异常的种类主要有 Error、RunTimeException、Exception 这三大类，其中前两种不需要显示的处理的，而后者需要显示的捕获或者抛出，业务方不希望感受到受检异常，因此得确保 Dubbo 接口不会抛出受检异常。Dubbo 生成代理的方式使用的是 Javassist，该框架以前也没有使用过，所以先来看看 JDK 生成的代理类是如果处理异常的。&lt;/p&gt;</summary>
    
    
    
    <category term="java-se" scheme="https://www.itgrocery.cn/categories/java-se/"/>
    
    
    <category term="dynamic-proxy" scheme="https://www.itgrocery.cn/tags/dynamic-proxy/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 删除用户的文件夹</title>
    <link href="https://www.itgrocery.cn/posts/b5e784b3/"/>
    <id>https://www.itgrocery.cn/posts/b5e784b3/</id>
    <published>2019-06-29T15:29:53.000Z</published>
    <updated>2020-01-04T05:35:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们的 Windows 上面的创建了多个用户，如果我们想删除的话也想连带着把用户的文件夹也删除，Windows10 是提供这样的功能给我们操作的。</p><span id="more"></span><p>操作步骤如下：右键计算机-属性-高级系统设置-用户配置文件： </p><p><img data-src="https://site.itgrocery.cn/2019/media/15781161780209.jpg"></p><hr><p>摘自：<a href="https://blog.csdn.net/tansongzhu/article/details/79251281">https://blog.csdn.net/tansongzhu/article/details/79251281</a></p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时候我们的 Windows 上面的创建了多个用户，如果我们想删除的话也想连带着把用户的文件夹也删除，Windows10 是提供这样的功能给我们操作的。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://www.itgrocery.cn/categories/tools/"/>
    
    
    <category term="windows" scheme="https://www.itgrocery.cn/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>将 HBase 主机的 swappiness 设置为0</title>
    <link href="https://www.itgrocery.cn/posts/9900b865/"/>
    <id>https://www.itgrocery.cn/posts/9900b865/</id>
    <published>2019-06-28T15:29:53.000Z</published>
    <updated>2020-01-04T05:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>HBase 是一个对内存比较敏感的存储系统，所以需要将 Linux 系统的交换内存设置为0，否则当系统内存不足时如果出现内存交换会造成 HBase 与 Zookeeper 之间的会话超时，比较明显的问题就是 RegionServer 会经常挂掉。</p><span id="more"></span><ul><li>将 swappines 临时设置为0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root# sysctl -w vm.swappiness=0</span><br></pre></td></tr></table></figure><ul><li>将 swappines 永久设置为0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root# echo &quot;vm.swappiness = 0&quot; &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><hr><p>上述配置摘自：<a href="https://www.packtpub.com/mapt/book/big_data_and_business_intelligence/9781849517140/8/ch08lvl1sec05/setting-vm.swappiness-to-0-to-avoid-swap">https://www.packtpub.com/mapt/book/big_data_and_business_intelligence/9781849517140/8/ch08lvl1sec05/setting-vm.swappiness-to-0-to-avoid-swap</a></p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;HBase 是一个对内存比较敏感的存储系统，所以需要将 Linux 系统的交换内存设置为0，否则当系统内存不足时如果出现内存交换会造成 HBase 与 Zookeeper 之间的会话超时，比较明显的问题就是 RegionServer 会经常挂掉。&lt;/p&gt;</summary>
    
    
    
    <category term="bigdata" scheme="https://www.itgrocery.cn/categories/bigdata/"/>
    
    
    <category term="hbase" scheme="https://www.itgrocery.cn/tags/hbase/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo 中过滤器（filter）加载流程解析以及建议</title>
    <link href="https://www.itgrocery.cn/posts/1ec2949/"/>
    <id>https://www.itgrocery.cn/posts/1ec2949/</id>
    <published>2019-05-29T15:29:53.000Z</published>
    <updated>2023-05-06T06:48:10.300Z</updated>
    
    <content type="html"><![CDATA[<p>Dubbo 在远程调用的过程中会涉及到服务提供方（Provider）与 服务消费方（Consumer），如果我们希望在这两边调用的过程中添加一些额外的逻辑可以使用 Dubbo 提供给我们的过滤器来实现。</p><span id="more"></span><p>Dubbo 的拦过滤器使用的是 SPI 机制来实现的，如果要编写过滤器需要先实现 Dubbo 提供的 Filter 接口，然后在“META-INF&#x2F;dubbo&#x2F;internal&#x2F;com.alibaba.dubbo.rpc.Filter”文件夹下配置自己实现的过滤器，Dubbo 为我们提供了一些自带的过滤器，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cache=com.alibaba.dubbo.cache.filter.CacheFilter</span><br><span class="line">validation=com.alibaba.dubbo.validation.filter.ValidationFilter</span><br><span class="line">echo=com.alibaba.dubbo.rpc.filter.EchoFilter</span><br><span class="line">generic=com.alibaba.dubbo.rpc.filter.GenericFilter</span><br><span class="line">genericimpl=com.alibaba.dubbo.rpc.filter.GenericImplFilter</span><br><span class="line">token=com.alibaba.dubbo.rpc.filter.TokenFilter</span><br><span class="line">accesslog=com.alibaba.dubbo.rpc.filter.AccessLogFilter</span><br><span class="line">activelimit=com.alibaba.dubbo.rpc.filter.ActiveLimitFilter</span><br><span class="line">classloader=com.alibaba.dubbo.rpc.filter.ClassLoaderFilter</span><br><span class="line">context=com.alibaba.dubbo.rpc.filter.ContextFilter</span><br><span class="line">consumercontext=com.alibaba.dubbo.rpc.filter.ConsumerContextFilter</span><br><span class="line">exception=com.alibaba.dubbo.rpc.filter.ExceptionFilter</span><br><span class="line">executelimit=com.alibaba.dubbo.rpc.filter.ExecuteLimitFilter</span><br><span class="line">deprecated=com.alibaba.dubbo.rpc.filter.DeprecatedFilter</span><br><span class="line">compatible=com.alibaba.dubbo.rpc.filter.CompatibleFilter</span><br><span class="line">timeout=com.alibaba.dubbo.rpc.filter.TimeoutFilter</span><br><span class="line">trace=com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter</span><br><span class="line">future=com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter</span><br><span class="line">monitor=com.alibaba.dubbo.monitor.support.MonitorFilter</span><br></pre></td></tr></table></figure><p><strong>Dubbo 中过滤器的定义会结合“@Activate”注解来使用，如果我们定义了一个过滤器，但是没有在该类上添加“@Activate”的注解，那么默认情况下该注解不会被激活，例如 Dubbo 中的 “CompatibleFilter”就没有添加激活的注解，所以该过滤器默认情况下不会被启用。</strong></p><p>在 Dubbo 中获取过滤器的实现类是 ExtentationLoader，该类可以根据 type 来获取相应的插件，我们这里想获取过滤器的插件，所以 type 的类型是 Filter.class。获取激活的过滤器的入口代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;T&gt; getActivateExtension(URL url, String[] values, String group) &#123;</span><br><span class="line">        List&lt;T&gt; exts = new ArrayList&lt;T&gt;();</span><br><span class="line">        List&lt;String&gt; names = values == null ? new ArrayList&lt;String&gt;(0) : Arrays.asList(values);</span><br><span class="line">        if (!names.contains(Constants.REMOVE_VALUE_PREFIX + Constants.DEFAULT_KEY)) &#123;</span><br><span class="line">            getExtensionClasses();</span><br><span class="line">            for (Map.Entry&lt;String, Activate&gt; entry : cachedActivates.entrySet()) &#123;</span><br><span class="line">                String name = entry.getKey();</span><br><span class="line">                Activate activate = entry.getValue();</span><br><span class="line">                if (isMatchGroup(group, activate.group())) &#123;</span><br><span class="line">                    T ext = getExtension(name);</span><br><span class="line">                    if (!names.contains(name)</span><br><span class="line">                            &amp;&amp; !names.contains(Constants.REMOVE_VALUE_PREFIX + name)</span><br><span class="line">                            &amp;&amp; isActive(activate, url)) &#123;</span><br><span class="line">                        exts.add(ext);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(exts, ActivateComparator.COMPARATOR);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;T&gt; usrs = new ArrayList&lt;T&gt;();</span><br><span class="line">        for (int i = 0; i &lt; names.size(); i++) &#123;</span><br><span class="line">            String name = names.get(i);</span><br><span class="line">            if (!name.startsWith(Constants.REMOVE_VALUE_PREFIX)</span><br><span class="line">                    &amp;&amp; !names.contains(Constants.REMOVE_VALUE_PREFIX + name)) &#123;</span><br><span class="line">                if (Constants.DEFAULT_KEY.equals(name)) &#123;</span><br><span class="line">                    if (!usrs.isEmpty()) &#123;</span><br><span class="line">                        exts.addAll(0, usrs);</span><br><span class="line">                        usrs.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    T ext = getExtension(name);</span><br><span class="line">                    usrs.add(ext);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!usrs.isEmpty()) &#123;</span><br><span class="line">            exts.addAll(usrs);</span><br><span class="line">        &#125;</span><br><span class="line">        return exts;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该方法会根据 Provider 或者 Consumer 的 url，插件列表以及分组来配置插件，该代码的逻辑主要分为两部分，一部分是配置默认激活的插件，另外一部分是配置用户指定的过滤器。</p><h2 id="1-装载默认激活的过滤器"><a href="#1-装载默认激活的过滤器" class="headerlink" title="1. 装载默认激活的过滤器"></a>1. 装载默认激活的过滤器</h2><p>上述代码中有一行代码是“getExtensionClasses()”，该方法的作用是获取所有配置过的 Filter，它会扫描“META-INF&#x2F;dubbo&#x2F;internal&#x2F;”、“META-INF&#x2F;dubbo&#x2F;”、“META-INF&#x2F;services&#x2F;” 目录下的配置文件，getExtensionClasses() 方法代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private Map&lt;String, Class&lt;?&gt;&gt; getExtensionClasses() &#123;</span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; classes = cachedClasses.get();</span><br><span class="line">        if (classes == null) &#123;</span><br><span class="line">            synchronized (cachedClasses) &#123;</span><br><span class="line">                classes = cachedClasses.get();</span><br><span class="line">                if (classes == null) &#123;</span><br><span class="line">                    classes = loadExtensionClasses();</span><br><span class="line">                    cachedClasses.set(classes);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return classes;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到 Dubbo 并不会每次都去扫描这些插件，如果在缓存中找不到这些插件才会去调用 loadExtensionClasses()，loadExtensionClasses() 代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// synchronized in getExtensionClasses</span><br><span class="line">    private Map&lt;String, Class&lt;?&gt;&gt; loadExtensionClasses() &#123;</span><br><span class="line">        final SPI defaultAnnotation = type.getAnnotation(SPI.class);</span><br><span class="line">        if (defaultAnnotation != null) &#123;</span><br><span class="line">            String value = defaultAnnotation.value();</span><br><span class="line">            if ((value = value.trim()).length() &gt; 0) &#123;</span><br><span class="line">                String[] names = NAME_SEPARATOR.split(value);</span><br><span class="line">                if (names.length &gt; 1) &#123;</span><br><span class="line">                    throw new IllegalStateException(&quot;more than 1 default extension name on extension &quot; + type.getName()</span><br><span class="line">                            + &quot;: &quot; + Arrays.toString(names));</span><br><span class="line">                &#125;</span><br><span class="line">                if (names.length == 1) cachedDefaultName = names[0];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; extensionClasses = new HashMap&lt;String, Class&lt;?&gt;&gt;();</span><br><span class="line">        loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY);</span><br><span class="line">        loadDirectory(extensionClasses, DUBBO_DIRECTORY);</span><br><span class="line">        loadDirectory(extensionClasses, SERVICES_DIRECTORY);</span><br><span class="line">        return extensionClasses;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以注意到装载插件时会去三个目录下面去装载插件，这就是开头所说的三个目录的依据。当然扫描完三个目录中所有的过滤器配置之后还需要进行筛选才会进行应用，筛选的逻辑代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for (Map.Entry&lt;String, Activate&gt; entry : cachedActivates.entrySet()) &#123;</span><br><span class="line">               String name = entry.getKey();</span><br><span class="line">               Activate activate = entry.getValue();</span><br><span class="line">               if (isMatchGroup(group, activate.group())) &#123;</span><br><span class="line">                   T ext = getExtension(name);</span><br><span class="line">                   if (!names.contains(name)</span><br><span class="line">                           &amp;&amp; !names.contains(Constants.REMOVE_VALUE_PREFIX + name)</span><br><span class="line">                           &amp;&amp; isActive(activate, url)) &#123;</span><br><span class="line">                       exts.add(ext);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>首先第一个判断条件是 isMatchGroup，如果过滤器的分组与当前需要的分组不匹配那么会被排除掉，第二个条件是用户在 @Reference 注解上显示配置的过滤器也会排除掉，第三个条件是如果用户显示配置的插件名前面加上了“-”前缀，那么也会进行排除，第四个条件是如果过滤器配置了关键字，那么会对 url 中的参数进行关键字匹配，只有匹配上的过滤器才会保留下来。</p><h2 id="2-对激活的过滤器进行排序"><a href="#2-对激活的过滤器进行排序" class="headerlink" title="2. 对激活的过滤器进行排序"></a>2. 对激活的过滤器进行排序</h2><p>上面已经讲解了默认激活的过滤器的装载，Dubbo 中的过滤器也是有优先级之分的，我们需要弄清楚不同过滤器执行的先后顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(exts, ActivateComparator.COMPARATOR);</span><br></pre></td></tr></table></figure><p>上面这行代码中 exts 是 List 类型的，Dubbo 使用 Collections 中的方法进行排序，排序的逻辑在 ActivateComparator.COMPARATOR 这个类中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public class ActivateComparator implements Comparator&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public static final Comparator&lt;Object&gt; COMPARATOR = new ActivateComparator();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int compare(Object o1, Object o2) &#123;</span><br><span class="line">        if (o1 == null &amp;&amp; o2 == null) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if (o1 == null) &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (o2 == null) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (o1.equals(o2)) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        Activate a1 = o1.getClass().getAnnotation(Activate.class);</span><br><span class="line">        Activate a2 = o2.getClass().getAnnotation(Activate.class);</span><br><span class="line">        if ((a1.before().length &gt; 0 || a1.after().length &gt; 0</span><br><span class="line">                || a2.before().length &gt; 0 || a2.after().length &gt; 0)</span><br><span class="line">                &amp;&amp; o1.getClass().getInterfaces().length &gt; 0</span><br><span class="line">                &amp;&amp; o1.getClass().getInterfaces()[0].isAnnotationPresent(SPI.class)) &#123;</span><br><span class="line">            ExtensionLoader&lt;?&gt; extensionLoader = ExtensionLoader.getExtensionLoader(o1.getClass().getInterfaces()[0]);</span><br><span class="line">            if (a1.before().length &gt; 0 || a1.after().length &gt; 0) &#123;</span><br><span class="line">                String n2 = extensionLoader.getExtensionName(o2.getClass());</span><br><span class="line">                for (String before : a1.before()) &#123;</span><br><span class="line">                    if (before.equals(n2)) &#123;</span><br><span class="line">                        return -1;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                for (String after : a1.after()) &#123;</span><br><span class="line">                    if (after.equals(n2)) &#123;</span><br><span class="line">                        return 1;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (a2.before().length &gt; 0 || a2.after().length &gt; 0) &#123;</span><br><span class="line">                String n1 = extensionLoader.getExtensionName(o1.getClass());</span><br><span class="line">                for (String before : a2.before()) &#123;</span><br><span class="line">                    if (before.equals(n1)) &#123;</span><br><span class="line">                        return 1;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                for (String after : a2.after()) &#123;</span><br><span class="line">                    if (after.equals(n1)) &#123;</span><br><span class="line">                        return -1;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int n1 = a1 == null ? 0 : a1.order();</span><br><span class="line">        int n2 = a2 == null ? 0 : a2.order();</span><br><span class="line">        // never return 0 even if n1 equals n2, otherwise, o1 and o2 will override each other in collection like HashSet</span><br><span class="line">        return n1 &gt; n2 ? 1 : -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个类中我们可以看到 @Active 中的 order、before、after 等注解会影响排序的结果，其中 before、after 的优先级较高，当然如果没有显示配置 order 的话，默认的优先级是 0，根据上述代码也可以知道 order 越小优先级越高，这个 Servlet 中的规则是类似的。</p><h2 id="3-装载用户指定的过滤器"><a href="#3-装载用户指定的过滤器" class="headerlink" title="3. 装载用户指定的过滤器"></a>3. 装载用户指定的过滤器</h2><p>当系统默认的过滤器加载完之后，Dubbo 会去加载用户配置的 filters，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; names.size(); i++) &#123;</span><br><span class="line">            String name = names.get(i);</span><br><span class="line">            if (!name.startsWith(Constants.REMOVE_VALUE_PREFIX)</span><br><span class="line">                    &amp;&amp; !names.contains(Constants.REMOVE_VALUE_PREFIX + name)) &#123;</span><br><span class="line">                if (Constants.DEFAULT_KEY.equals(name)) &#123;</span><br><span class="line">                    if (!usrs.isEmpty()) &#123;</span><br><span class="line">                        exts.addAll(0, usrs);</span><br><span class="line">                        usrs.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    T ext = getExtension(name);</span><br><span class="line">                    usrs.add(ext);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>用户指定类型的过滤器加载过程比较简单，主要是配置中没有包含“-”就可以了，当然 Dubbo 还进行一些特殊的处理，例如“-filter”进行了优化，如果用户在前面加上了空格之类的字符也是可以进行识别的。当加载用户指定的过滤器时，里面有一个关键字“default”，在“default”前面的过滤器会装载到系统过滤器的前面，反之就在后面，上面代码中逻辑可以验证官网的说法。</p><h2 id="4-自定义-filter-建议"><a href="#4-自定义-filter-建议" class="headerlink" title="4. 自定义 filter 建议"></a>4. 自定义 filter 建议</h2><p>一般这些 filter 可以按功能分为中间件的 filter 和 业务 filter，中间件的 filter 会设计得更加通用一些，业务的 filter 更加具有针对性。这两种 filter 在设计的时候建议区别对待，一般中间件的 filter 我们可以定义成系统级别的 filter，也就是在 filter 上面加上“@Active” 注解，而业务使用的 filter 不建议加上这个注解。这样做的好处就是业务的 filter 会始终在系统级别 filter 的前面或者后面，不会破坏中间件原有 filter 的逻辑，也有利于问题的排查，业务人员如果要激活这个 filter，需要自行在配置文件中显示的进行配置，可以使用“default”来控制业务 filter 生效的顺序。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Dubbo 在远程调用的过程中会涉及到服务提供方（Provider）与 服务消费方（Consumer），如果我们希望在这两边调用的过程中添加一些额外的逻辑可以使用 Dubbo 提供给我们的过滤器来实现。&lt;/p&gt;</summary>
    
    
    
    <category term="microservices" scheme="https://www.itgrocery.cn/categories/microservices/"/>
    
    
    <category term="dubbo" scheme="https://www.itgrocery.cn/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Maven上传本地 Jar 包到远程仓库</title>
    <link href="https://www.itgrocery.cn/posts/29c290be/"/>
    <id>https://www.itgrocery.cn/posts/29c290be/</id>
    <published>2018-11-07T15:29:53.000Z</published>
    <updated>2020-01-04T06:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果是公司的项目我们一般会将一些公共的代码放在 Jar 包中让组内其它成员使用。</p><span id="more"></span><h2 id="配置项目的-POM-文件"><a href="#配置项目的-POM-文件" class="headerlink" title="配置项目的 POM 文件"></a>配置项目的 POM 文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">        &lt;snapshotRepository&gt;</span><br><span class="line">            &lt;id&gt;mobile-group-snapshots&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;mobile-group&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://192.168.9.230:8081/repository/java-snapshots/&lt;/url&gt;</span><br><span class="line">        &lt;/snapshotRepository&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;mobile-group-releases&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;mobile-group&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://192.168.9.230:8081/repository/java-releases/&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure><p>因为远程仓库分 release 和 snapshot 两个仓库，所以需要添加两个仓库的地址。</p><h2 id="配置-m2-目录下的-settings-xml-文件"><a href="#配置-m2-目录下的-settings-xml-文件" class="headerlink" title="配置 .m2 目录下的 settings.xml 文件"></a>配置 .m2 目录下的 settings.xml 文件</h2><h4 id="1-添加远程仓库的认证信息"><a href="#1-添加远程仓库的认证信息" class="headerlink" title="1. 添加远程仓库的认证信息"></a>1. 添加远程仓库的认证信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &lt;server&gt;</span><br><span class="line">    &lt;id&gt;mobile-group-snapshots&lt;/id&gt;</span><br><span class="line">    &lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line">  &lt;/server&gt;</span><br><span class="line">  &lt;server&gt;</span><br><span class="line">    &lt;id&gt;mobile-group-releases&lt;/id&gt;</span><br><span class="line">    &lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line">  &lt;/server&gt;</span><br><span class="line">&lt;/servers&gt;</span><br></pre></td></tr></table></figure><h4 id="2-配置访问远程-snapshots-仓库中的资源"><a href="#2-配置访问远程-snapshots-仓库中的资源" class="headerlink" title="2. 配置访问远程 snapshots 仓库中的资源"></a>2. 配置访问远程 snapshots 仓库中的资源</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  &lt;profile&gt;</span><br><span class="line">    &lt;id&gt;profile-ehi&lt;/id&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">      &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;mobile-group&lt;/id&gt;</span><br><span class="line">        &lt;name&gt;mobile-group&lt;/name&gt;</span><br><span class="line">        &lt;url&gt;http://192.168.9.230:8081/repository/mobile-group/&lt;/url&gt;</span><br><span class="line">        &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</span><br><span class="line">        &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;  </span><br><span class="line">      &lt;/repository&gt;  </span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line">  &lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure><p>在 Maven 中有 group 和 repository 的概念，group 是由 repository 组成的，如果 repository 在 group 中，我们配置 group 时可以访问到里面的 repository。如果不想全局使用这个配置可以讲上述配置项放在项目的 pom 文件中。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果是公司的项目我们一般会将一些公共的代码放在 Jar 包中让组内其它成员使用。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://www.itgrocery.cn/categories/tools/"/>
    
    
    <category term="maven" scheme="https://www.itgrocery.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven 多模块项目统一修改版本号</title>
    <link href="https://www.itgrocery.cn/posts/40d1f839/"/>
    <id>https://www.itgrocery.cn/posts/40d1f839/</id>
    <published>2018-10-11T15:29:53.000Z</published>
    <updated>2020-01-04T06:21:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>在编写复杂的 Maven 项目时，如果模块过多，并且层级复杂的话修改版本号是一个头痛的问题，我们不可能找到每个子模块去修改当前模块的版本号，以及它依赖模块的版本号。Maven 作为一个项目构建的工具，有专门的插件为我们提供修改版本号的功能。</p><span id="more"></span><h2 id="1-在顶级-module-中添加插件"><a href="#1-在顶级-module-中添加插件" class="headerlink" title="1. 在顶级 module 中添加插件"></a>1. 在顶级 module 中添加插件</h2><p>为了使用版本号修改的功能，需要现在顶级 module 中添加插件，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;versions-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.3&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;generateBackupPoms&gt;false&lt;/generateBackupPoms&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>这个插件中有一些配置，上述“generateBackupPoms”配置的作用是在修改 pom 时是否对原文件进行备份，我们的项目一般都会使用 Git 进行管理，我们可以关闭备份功能。</p><h2 id="2-为顶级-module-设置新版本"><a href="#2-为顶级-module-设置新版本" class="headerlink" title="2. 为顶级 module 设置新版本"></a>2. 为顶级 module 设置新版本</h2><p>设置的方式有两种，一种是自己手动修改，另外一种是使用上述插件的命令，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn versions:set -DnewVersion=0.1.2-SNATHOST</span><br></pre></td></tr></table></figure><p><strong>该命令只会为顶级的 module 修改版本号。</strong></p><h2 id="3-更新所有子-module-的版本"><a href="#3-更新所有子-module-的版本" class="headerlink" title="3. 更新所有子 module 的版本"></a>3. 更新所有子 module 的版本</h2><p>更新方式很简单，只需要执行一条命令即可，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn versions:update-child-modules</span><br></pre></td></tr></table></figure><p><strong>在更新子 module 的版本时需要注意，我们之前的项目的所有 module 版本号需要统一，否则版本号会更新不全。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在编写复杂的 Maven 项目时，如果模块过多，并且层级复杂的话修改版本号是一个头痛的问题，我们不可能找到每个子模块去修改当前模块的版本号，以及它依赖模块的版本号。Maven 作为一个项目构建的工具，有专门的插件为我们提供修改版本号的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://www.itgrocery.cn/categories/tools/"/>
    
    
    <category term="maven" scheme="https://www.itgrocery.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 中参数名称设置规则源码分析</title>
    <link href="https://www.itgrocery.cn/posts/65881337/"/>
    <id>https://www.itgrocery.cn/posts/65881337/</id>
    <published>2018-09-29T15:29:53.000Z</published>
    <updated>2020-01-04T06:05:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis 是我们经常使用的 ORM 框架，在使用的过程中我最容易出现的问题就是参数没有传递正确，然后抛出异常说我们在 Mapper 文件中使用的一些参数没有找到。一开始遇到这种错误还挺懵的，后来遇到多了也能很容易的找出原因，特别是在表字段经常发生错误的情况下特别容易出现。但是对于 MyBatis 如何根据 Mapper 文件中引用的参数如何在接口中找到对应的值一直没有进行过研究，现在对 MyBatis 中参数的映射规则进行记录一下。</p><span id="more"></span><p>一般为了能让 Mapper 文件中的引用能正确找到接口中参数，我们会在接口中的参数上添加上“@Param”注解。</p><ul><li>接口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void deleteVoucherRecord(@Param(&quot;orderId&quot;) int orderId, @Param(&quot;voucherType&quot;) int voucherType);</span><br></pre></td></tr></table></figure><ul><li>Mapper文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;deleteVoucherRecord&quot;&gt;</span><br><span class="line">UPDATE `voucher_record`</span><br><span class="line">        SET `is_deleted` = 1</span><br><span class="line">        WHERE</span><br><span class="line">            `order_id` = #&#123;orderId&#125; AND `is_deleted` = 0 AND `voucher_category` =#&#123;voucherType&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><p>如果我们在接口中的参数列表中使用注解，那么 MyBatis 会根据 Mapper 文件中引用的参数名去接口中寻找相应参数的值。如果我们没有使用 “@Param”注解的话 MyBatis 会使用一套另外一套规则，下面根据源码来了解这套规则。</p><p>因为我们写的接口最终会被代理，所以我们直接看 org.apache.ibatis.binding.MapperProxy 这个类，因为接口中的方法最终被调用时最终会在它的代理类中执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    if (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">      return method.invoke(this, args);</span><br><span class="line">    &#125; else if (isDefaultMethod(method)) &#123;</span><br><span class="line">      return invokeDefaultMethod(proxy, method, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (Throwable t) &#123;</span><br><span class="line">    throw ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">  &#125;</span><br><span class="line">  final MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">  return mapperMethod.execute(sqlSession, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看倒数第二行代码，根据接口的 Method 找到对应的 MapperMethod，也就是根据接口中的“deleteVoucherRecord”方法找到 Mapper文件中 id 为“deleteVoucherRecord”的 SQL 语句。</p><p>下面来看看 MapperMethod 类中的 execute 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public Object execute(SqlSession sqlSession, Object[] args) &#123;</span><br><span class="line">  Object result;</span><br><span class="line">  switch (command.getType()) &#123;</span><br><span class="line">    case INSERT: &#123;</span><br><span class="line">  Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">    case UPDATE: &#123;</span><br><span class="line">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">    case DELETE: &#123;</span><br><span class="line">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">    case SELECT:</span><br><span class="line">      if (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">        executeWithResultHandler(sqlSession, args);</span><br><span class="line">        result = null;</span><br><span class="line">      &#125; else if (method.returnsMany()) &#123;</span><br><span class="line">        result = executeForMany(sqlSession, args);</span><br><span class="line">      &#125; else if (method.returnsMap()) &#123;</span><br><span class="line">        result = executeForMap(sqlSession, args);</span><br><span class="line">      &#125; else if (method.returnsCursor()) &#123;</span><br><span class="line">        result = executeForCursor(sqlSession, args);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line">        if (method.returnsOptional() &amp;&amp;</span><br><span class="line">            (result == null || !method.getReturnType().equals(result.getClass()))) &#123;</span><br><span class="line">          result = Optional.ofNullable(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      break;</span><br><span class="line">    case FLUSH:</span><br><span class="line">      result = sqlSession.flushStatements();</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw new BindingException(&quot;Unknown execution method for: &quot; + command.getName());</span><br><span class="line">  &#125;</span><br><span class="line">  if (result == null &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class="line">    throw new BindingException(&quot;Mapper method &#x27;&quot; + command.getName() </span><br><span class="line">        + &quot; attempted to return null from a method with a primitive return type (&quot; + method.getReturnType() + &quot;).&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码可以看到我们从接口中传入的参数经过转换返回了一个 Object，至于 Object 是什么我们现在无法知道，所以继续跟进代码进行推理与验证。</p><p>org.apache.ibatis.binding.MapperMethod.MethodSignature#convertArgsToSqlCommandParam 代码内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Object convertArgsToSqlCommandParam(Object[] args) &#123;</span><br><span class="line">  return paramNameResolver.getNamedParams(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码块并没有什么功能逻辑，它将该功能委托给了 org.apache.ibatis.reflection.ParamNameResolver 类来处理，这里可以看到单一职责的设计模式，就行领导不会做很底层的事情一样，领导只需要负责指挥、调控就行了，具体的活就交给小弟完成就行了。</p><p>org.apache.ibatis.reflection.ParamNameResolver#getNamedParams 代码内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * A single non-special parameter is returned without a name.</span><br><span class="line"> * Multiple parameters are named using the naming rule.</span><br><span class="line"> * In addition to the default names, this method also adds the generic names (param1, param2,</span><br><span class="line"> * ...).</span><br><span class="line"> * &lt;/p&gt;</span><br><span class="line"> */</span><br><span class="line">public Object getNamedParams(Object[] args) &#123;</span><br><span class="line">  final int paramCount = names.size();</span><br><span class="line">  if (args == null || paramCount == 0) &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125; else if (!hasParamAnnotation &amp;&amp; paramCount == 1) &#123;</span><br><span class="line">    return args[names.firstKey()];</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    final Map&lt;String, Object&gt; param = new ParamMap&lt;&gt;();</span><br><span class="line">    int i = 0;</span><br><span class="line">    for (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;</span><br><span class="line">      param.put(entry.getValue(), args[entry.getKey()]);</span><br><span class="line">      // add generic param names (param1, param2, ...)</span><br><span class="line">      final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);</span><br><span class="line">      // ensure not to overwrite parameter named with @Param</span><br><span class="line">      if (!names.containsValue(genericParamName)) &#123;</span><br><span class="line">        param.put(genericParamName, args[entry.getKey()]);</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return param;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 MyBatis 参数映射逻辑关键代码，主要的逻辑都在这里。我们可以看到根据不同的条件返回值的类型也不一样。</p><ul><li><p>首先来分析一下接口中没有使用注解并且参数个数为一的情况，返回的值是“args[names.firstKey]”，这里“names”是一个成员变量，里面保存的是接口中函数的参数信息，它的类型是 SortedMap、Integer, String，从这里可以看到这是一个排序的 Map，key 保存的是函数中参数的位置，value 保存的是函数中参数的名称（如果使用了注解那么 value 就是注解中的值，没有使用注解的话就是 arg0、arg1）。这里需要注意下的是我们其实无法通过反射拿到函数中参数的真是名称，拿到的参数名称是 arg0、arg1（跟JDK版本有关，可有可能是0、1） 这种形式，当然 JAVA8 可以通过在编译时添加“-parameters”参数可以获取到真实的参数名，MyBatis 对这个特性在 <a href="https://github.com/mybatis/mybatis-3/releases">3.4.1</a> 上面有说明，但是我没有进行验证，如果读者有兴趣可以去验证下结果然后留言告诉我结果😝。这里作者这样写的意图应该是如果只有一个参数知不知道参数的真实名称已经没有什么意义了，因为可以进行选择的参数也就一个不存在映射错乱的问题。</p></li><li><p>如果参数不为空并且使用了注解的情况下返回的结果是 ParaMap ，这是 MyBatis 继承 HashMap 自定义的 Map，覆写了 get 方法。ParaMap 的 key 首先会保存通过注解或者反射回去到参数名，与此同时还会添加一个通用的参数名“genericParamName”，生成规则是“GENERIC_NAME_PREFIX + String.valueOf(i + 1)”，这里可以看到通用参数名的后缀是从1开始算的。</p></li></ul><p>上述代码中“names&amp;”是一个比较重要的成员变量，它是在 ParamNameResolver 类的构造函数中进行初始化的，它的初始化与用户的一项配置“useActualParamName”有关，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public ParamNameResolver(Configuration config, Method method) &#123;</span><br><span class="line">  final Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line">  final Annotation[][] paramAnnotations = method.getParameterAnnotations();</span><br><span class="line">  final SortedMap&lt;Integer, String&gt; map = new TreeMap&lt;&gt;();</span><br><span class="line">  int paramCount = paramAnnotations.length;</span><br><span class="line">  // get names from @Param annotations</span><br><span class="line">  for (int paramIndex = 0; paramIndex &lt; paramCount; paramIndex++) &#123;</span><br><span class="line">    if (isSpecialParameter(paramTypes[paramIndex])) &#123;</span><br><span class="line">      // skip special parameters</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    String name = null;</span><br><span class="line">    for (Annotation annotation : paramAnnotations[paramIndex]) &#123;</span><br><span class="line">      if (annotation instanceof Param) &#123;</span><br><span class="line">        hasParamAnnotation = true;</span><br><span class="line">        name = ((Param) annotation).value();</span><br><span class="line">        break;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (name == null) &#123;</span><br><span class="line">      // @Param was not specified.</span><br><span class="line">      if (config.isUseActualParamName()) &#123;</span><br><span class="line">        name = getActualParamName(method, paramIndex);</span><br><span class="line">      &#125;</span><br><span class="line">      if (name == null) &#123;</span><br><span class="line">        // use the parameter index as the name (&quot;0&quot;, &quot;1&quot;, ...)</span><br><span class="line">        // gcode issue #71</span><br><span class="line">        name = String.valueOf(map.size());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(paramIndex, name);</span><br><span class="line">  &#125;</span><br><span class="line">  names = Collections.unmodifiableSortedMap(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们配置“useActualName”为 true，那么 MyBatis 会尝试获取参数的真实名称，但最终是否能获取到跟具体的 JAVA Compiler 有关，所以如果不想使用“@Param”注解，这项配置也不能少。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MyBatis 是我们经常使用的 ORM 框架，在使用的过程中我最容易出现的问题就是参数没有传递正确，然后抛出异常说我们在 Mapper 文件中使用的一些参数没有找到。一开始遇到这种错误还挺懵的，后来遇到多了也能很容易的找出原因，特别是在表字段经常发生错误的情况下特别容易出现。但是对于 MyBatis 如何根据 Mapper 文件中引用的参数如何在接口中找到对应的值一直没有进行过研究，现在对 MyBatis 中参数的映射规则进行记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="java-web" scheme="https://www.itgrocery.cn/categories/java-web/"/>
    
    
    <category term="mybatis" scheme="https://www.itgrocery.cn/tags/mybatis/"/>
    
  </entry>
  
</feed>
